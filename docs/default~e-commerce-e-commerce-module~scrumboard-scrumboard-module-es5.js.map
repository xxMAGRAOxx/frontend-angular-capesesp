{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js"],"names":["_c0","MatChipSelectionChange","source","selected","isUserInput","MAT_CHIP_REMOVE","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","type","selectors","hostAttrs","features","provide","useExisting","args","selector","host","providers","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_disabled","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","nativeElement","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","emit","chip","_removeTriggerEvents","_dispatchSelectionChange","markForCheck","focus","next","removable","event","disabled","preventDefault","stopPropagation","keyCode","remove","selectable","toggleSelected","onStable","pipe","subscribe","run","disableRipple","value","coercedValue","_value","undefined","textContent","toString","MatChip_Factory","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","_t","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","MatChip_click_HostBindingHandler","$event","_handleClick","MatChip_keydown_HostBindingHandler","_handleKeydown","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","_blur","ariaSelected","inputs","color","outputs","exportAs","ctorParameters","decorators","String","propDecorators","MatChipRemove","_parentChip","elementRef","nodeName","setAttribute","parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","nextUniqueId","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","ariaOrientation","change","valueChange","valueAccessor","_keyManager","chips","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_syncChipsState","_resetChips","_initializeSelection","_updateTabIndex","_updateFocusForDestroyedChips","stateChanges","_selectionModel","multiple","updateErrorState","complete","_dropSubscriptions","inputElement","_chipInput","id","ids","_ariaDescribedby","join","_setSelectionByValue","fn","isDisabled","_originatesFromChip","options","focused","length","setFirstItemActive","_focusInput","target","_isInputEmpty","setLastItemActive","contains","onKeydown","newChipIndex","Math","min","setActiveItem","index","input","_clearSelection","forEach","deselect","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","selectViaInteraction","select","skip","clear","fallbackValue","valueToEmit","map","_hasFocusedChip","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","chipIndex","toArray","indexOf","_isValidIndex","updateActiveItem","chipBlurChanges","chipRemoveChanges","currentElement","parentElement","some","empty","writeValue","placeholder","_placeholder","MatChipList_Factory","ɵcmp","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","_keydown","role","required","errorState","compareWith","errorStateMatcher","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","styles","encapsulation","changeDetection","descendants","None","OnPush","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","_chipList","_emitChipEnd","addOnBlur","_isSeparatorKey","Set","has","registerInput","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","_focus","MatChipInput_input_HostBindingHandler","_onInput","invalid","chipList","CHIP_DECLARATIONS","ɵ0","MatChipsModule","ɵmod","ɵinj","factory","MatChipsModule_Factory","useValue","ngJitMode","declarations","exports"],"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","file":"default~e-commerce-e-commerce-module~scrumboard-scrumboard-module-es5.js","sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' },\n                providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }]\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' },\n                providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }]\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n    get selected() { return this._selected; }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() { return this._removable; }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MAT_CHIP_AVATAR,] }],\n    trailingIcon: [{ type: ContentChild, args: [MAT_CHIP_TRAILING_ICON,] }],\n    removeIcon: [{ type: ContentChild, args: [MAT_CHIP_REMOVE,] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MAT_CHIP_AVATAR]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_TRAILING_ICON]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_REMOVE]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }])] });\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                },\n                providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }]\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, \n    /** @docs-private */\n    ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() { return this.empty ? null : 'listbox'; }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._value; }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() { return this._selectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            let input = element;\n            return !input.value;\n        }\n        return false;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /** Whether the input is disabled. */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether the input is empty. */\n    get empty() { return !this._inputElement.value; }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._inputElement.focus(options);\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); }, providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ɵ0\n        }\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon], exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n\n//# sourceMappingURL=chips.js.map"]}