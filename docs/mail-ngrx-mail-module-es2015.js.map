{"version":3,"sources":["./src/app/main/apps/mail-ngrx/store/selectors/index.ts","./src/app/main/apps/mail-ngrx/store/reducers/filters.reducer.ts","./src/app/main/apps/mail-ngrx/store/selectors/mails.selectors.ts","./src/app/main/apps/mail-ngrx/store/effects/mails.effects.ts","./src/app/main/apps/mail-ngrx/store/reducers/labels.reducer.ts","./src/app/main/apps/mail-ngrx/store/effects/filters.effects.ts","./src/app/main/apps/mail-ngrx/store/actions/labels.actions.ts","./src/app/main/apps/mail-ngrx/store/selectors/labels.selectors.ts","./src/app/main/apps/mail-ngrx/i18n/en.ts","./src/app/main/apps/mail-ngrx/store/store.module.ts","./src/app/main/apps/mail-ngrx/dialogs/compose/compose.component.ts","./src/app/main/apps/mail-ngrx/dialogs/compose/compose.component.html","./src/app/main/apps/mail-ngrx/mail-details/mail-details.component.ts","./src/app/main/apps/mail-ngrx/mail-details/mail-details.component.html","./src/app/main/apps/mail-ngrx/store/actions/filters.actions.ts","./src/app/main/apps/mail-ngrx/mail.service.ts","./src/app/main/apps/mail-ngrx/store/effects/labels.effects.ts","./src/app/main/apps/mail-ngrx/store/effects/folders.effects.ts","./src/app/main/apps/mail-ngrx/mail.module.ts","./src/app/main/apps/mail-ngrx/store/selectors/filters.selectors.ts","./src/app/main/apps/mail-ngrx/store/reducers/index.ts","./src/app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component.ts","./src/app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component.html","./src/app/main/apps/mail-ngrx/store/selectors/folders.selectors.ts","./src/app/main/apps/mail-ngrx/store/actions/index.ts","./src/app/main/apps/mail-ngrx/store/guards/resolve.guard.ts","./src/app/main/apps/mail-ngrx/mail.component.ts","./src/app/main/apps/mail-ngrx/mail.component.html","./src/app/main/apps/mail-ngrx/store/guards/index.ts","./src/app/main/apps/mail-ngrx/store/reducers/folders.reducer.ts","./src/app/main/apps/mail-ngrx/store/index.ts","./src/app/main/apps/mail-ngrx/store/actions/mails.actions.ts","./src/app/main/apps/mail-ngrx/i18n/tr.ts","./src/app/main/apps/mail-ngrx/mail.model.ts","./src/app/main/apps/mail-ngrx/mail-list/mail-list.component.ts","./src/app/main/apps/mail-ngrx/mail-list/mail-list.component.html","./src/app/main/apps/mail-ngrx/store/reducers/mails.reducer.ts","./src/app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component.ts","./src/app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component.html","./src/app/main/apps/mail-ngrx/store/actions/folders.actions.ts","./src/app/main/apps/mail-ngrx/store/effects/index.ts"],"names":[],"mappings":"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","file":"mail-ngrx-mail-module-es2015.js","sourcesContent":["export * from './mails.selectors';\r\nexport * from './folders.selectors';\r\nexport * from './filters.selectors';\r\nexport * from './labels.selectors';\r\n","import * as FiltersActions from 'app/main/apps/mail-ngrx/store/actions/filters.actions';\r\n\r\nexport interface FiltersState\r\n{\r\n    entities?: { [id: number]: any };\r\n    loading: boolean;\r\n    loaded: boolean;\r\n}\r\n\r\nexport const FiltersInitialState: FiltersState = {\r\n    entities: {},\r\n    loading : false,\r\n    loaded  : false\r\n};\r\n\r\nexport function FiltersReducer(state = FiltersInitialState, action: FiltersActions.FiltersActionsAll): FiltersState\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case FiltersActions.GET_FILTERS:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                loaded : false\r\n            };\r\n        case FiltersActions.GET_FILTERS_SUCCESS:\r\n\r\n            const filters = action.payload;\r\n            const entities = filters.reduce(\r\n                (_entities: { [id: number]: any }, filter: any) => {\r\n                    return {\r\n                        ..._entities,\r\n                        [filter.id]: filter\r\n                    };\r\n                }, {});\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : true,\r\n                entities\r\n            };\r\n\r\n        case FiltersActions.GET_FILTERS_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { FuseUtils } from '@fuse/utils';\r\n\r\nimport { createSelector } from '@ngrx/store';\r\nimport { getMailAppState, MailAppState, MailsState } from 'app/main/apps/mail-ngrx/store/reducers';\r\n\r\nexport const getMailsState = createSelector(\r\n    getMailAppState,\r\n    (state: MailAppState) => state.mails\r\n);\r\n\r\nexport const getMails = createSelector(\r\n    getMailsState,\r\n    (state: MailsState) => state.entities\r\n);\r\n\r\nexport const getMailsLoaded = createSelector(\r\n    getMailsState,\r\n    (state: MailsState) => state.loaded\r\n);\r\n\r\nexport const getSearchText = createSelector(\r\n    getMailsState,\r\n    (state: MailsState) => state.searchText\r\n);\r\n\r\nexport const getMailsArr = createSelector(\r\n    getMails,\r\n    getSearchText,\r\n    (entities, searchText) => {\r\n        const arr = Object.keys(entities).map((id) => entities[id]);\r\n        return FuseUtils.filterArrayByString(arr, searchText);\r\n    }\r\n);\r\n\r\nexport const getCurrentMail = createSelector(\r\n    getMailsState,\r\n    (state: MailsState) => state.currentMail\r\n);\r\n\r\nexport const getSelectedMailIds = createSelector(\r\n    getMailsState,\r\n    (state: MailsState) => state.selectedMailIds\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { Action, select, Store } from '@ngrx/store';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\n\r\nimport { Observable, of, forkJoin } from 'rxjs';\r\nimport { catchError, debounceTime, map, mergeMap, exhaustMap, withLatestFrom } from 'rxjs/operators';\r\n\r\nimport { getRouterState, State } from 'app/store/reducers';\r\nimport { getMailsState } from 'app/main/apps/mail-ngrx/store/selectors';\r\nimport * as MailsActions from 'app/main/apps/mail-ngrx/store/actions/mails.actions';\r\nimport * as fromRoot from 'app/store';\r\n\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Injectable()\r\nexport class MailsEffect\r\n{\r\n    routerState: any;\r\n\r\n    constructor(\r\n        private actions: Actions,\r\n        private mailService: MailNgrxService,\r\n        private store: Store<State>\r\n    )\r\n    {\r\n        this.store\r\n            .pipe(select(getRouterState))\r\n            .subscribe(routerState => {\r\n                if ( routerState )\r\n                {\r\n                    this.routerState = routerState.state;\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Get Mails with router parameters\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    getMails: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.GetMails>(MailsActions.GET_MAILS),\r\n                exhaustMap((action) => {\r\n\r\n                    let handle = {\r\n                        id   : '',\r\n                        value: ''\r\n                    };\r\n\r\n                    const routeParams = of('labelHandle', 'filterHandle', 'folderHandle');\r\n                    routeParams.subscribe(param => {\r\n                        if ( this.routerState.params[param] )\r\n                        {\r\n                            handle = {\r\n                                id   : param,\r\n                                value: this.routerState.params[param]\r\n                            };\r\n                        }\r\n                    });\r\n\r\n                    return this.mailService.getMails(handle)\r\n                               .pipe(\r\n                                   map((mails: Mail[]) => {\r\n\r\n                                       return new MailsActions.GetMailsSuccess({\r\n                                           loaded: handle,\r\n                                           mails : mails\r\n                                       });\r\n                                   }),\r\n                                   catchError(err => of(new MailsActions.GetMailsFailed(err)))\r\n                               );\r\n                })\r\n            );\r\n\r\n    /**\r\n     * Update Mail\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    updateMail: Observable<{}> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.UpdateMail>(MailsActions.UPDATE_MAIL),\r\n                exhaustMap((action) => {\r\n                    return this.mailService.updateMail(action.payload).pipe(\r\n                        map(() => {\r\n                            return new MailsActions.UpdateMailSuccess(action.payload);\r\n                        })\r\n                    );\r\n                })\r\n            );\r\n\r\n    /**\r\n     * UpdateMails\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    updateMails: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.UpdateMails>(MailsActions.UPDATE_MAILS),\r\n                exhaustMap((action) => {\r\n                    return forkJoin(action.payload.map(mail => this.mailService.updateMail(mail))).pipe(map(() => {\r\n                        return new MailsActions.UpdateMailsSuccess();\r\n                    }));\r\n                })\r\n            );\r\n\r\n    /**\r\n     * Set Current Mail\r\n     * @type {Observable<SetCurrentMailSuccess>}\r\n     */\r\n    @Effect()\r\n    setCurrentMail: Observable<Action> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.SetCurrentMail>(MailsActions.SET_CURRENT_MAIL),\r\n                withLatestFrom(this.store.pipe(select(getMailsState))),\r\n                map(([action, state]) => {\r\n                    return new MailsActions.SetCurrentMailSuccess(state.entities[action.payload]);\r\n                })\r\n            );\r\n\r\n    /**\r\n     * Check Current Mail\r\n     * Navigate to parent directory if not exist in mail list\r\n     * Update Current Mail if exist in mail list\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    checkCurrentMail: Observable<Action> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.CheckCurrentMail>(MailsActions.CHECK_CURRENT_MAIL),\r\n                withLatestFrom(this.store.pipe(select(getMailsState))),\r\n                map(([action, state]) => {\r\n\r\n                    if ( this.routerState.params.mailId && !state.entities[this.routerState.params.mailId] )\r\n                    {\r\n                        // return new fromRoot.Go({path: [this.routerState.url.replace(this.routerState.params.mailId, '')]});\r\n                    }\r\n\r\n                    return new MailsActions.SetCurrentMailSuccess(state.entities[this.routerState.params.mailId]);\r\n                })\r\n            );\r\n\r\n    /**\r\n     * On Get Mails Success\r\n     * @type {Observable<CheckCurrentMail>}\r\n     */\r\n    @Effect()\r\n    getMailsSuccess: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.GetMailsSuccess>(MailsActions.GET_MAILS_SUCCESS),\r\n                mergeMap(() =>\r\n                    [\r\n                        new MailsActions.CheckCurrentMail()\r\n                    ])\r\n            );\r\n    /**\r\n     * On Update Mails Success\r\n     * @type {Observable<DeselectAllMails | GetMails>}\r\n     */\r\n    @Effect()\r\n    updateMailsSuccess: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.UpdateMailsSuccess>(MailsActions.UPDATE_MAILS_SUCCESS),\r\n                mergeMap(() =>\r\n                    [\r\n                        new MailsActions.DeselectAllMails(),\r\n                        new MailsActions.GetMails()\r\n                    ])\r\n            );\r\n    /**\r\n     * On Update Mail Success\r\n     * @type {Observable<GetMails>}\r\n     */\r\n    @Effect()\r\n    updateMailSuccess: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.UpdateMailSuccess>(MailsActions.UPDATE_MAIL_SUCCESS),\r\n                debounceTime(500),\r\n                map(() => {\r\n                    return new MailsActions.GetMails();\r\n                })\r\n            );\r\n\r\n    /**\r\n     * Set Folder on Selected Mails\r\n     * @type {Observable<UpdateMails>}\r\n     */\r\n    @Effect()\r\n    setFolderOnSelectedMails: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.SetFolderOnSelectedMails>(MailsActions.SET_FOLDER_ON_SELECTED_MAILS),\r\n                withLatestFrom(\r\n                    this.store.pipe(select(getMailsState))),\r\n                map(([action, state]) => {\r\n                    const entities = {...state.entities};\r\n                    let mailsToUpdate = [];\r\n                    state.selectedMailIds\r\n                         .map(id => {\r\n                             mailsToUpdate = [\r\n                                 ...mailsToUpdate,\r\n                                 entities[id] = {\r\n                                     ...entities[id],\r\n                                     folder: action.payload\r\n                                 }\r\n                             ];\r\n                         });\r\n                    return new MailsActions.UpdateMails(mailsToUpdate);\r\n                })\r\n            );\r\n\r\n    /**\r\n     * Add Label on Selected Mails\r\n     * @type {Observable<UpdateMails>}\r\n     */\r\n    @Effect()\r\n    addLabelOnSelectedMails: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.AddLabelOnSelectedMails>(MailsActions.ADD_LABEL_ON_SELECTED_MAILS),\r\n                withLatestFrom(this.store.pipe(select(getMailsState))),\r\n                map(([action, state]) => {\r\n\r\n                    const entities = {...state.entities};\r\n                    let mailsToUpdate = [];\r\n\r\n                    state.selectedMailIds\r\n                         .map(id => {\r\n\r\n                             let labels = [...entities[id].labels];\r\n\r\n                             if ( !entities[id].labels.includes(action.payload) )\r\n                             {\r\n                                 labels = [...labels, action.payload];\r\n                             }\r\n\r\n                             mailsToUpdate = [\r\n                                 ...mailsToUpdate,\r\n                                 entities[id] = {\r\n                                     ...entities[id],\r\n                                     labels\r\n                                 }\r\n                             ];\r\n                         });\r\n\r\n                    return new MailsActions.UpdateMails(mailsToUpdate);\r\n                })\r\n            );\r\n}\r\n","import * as LabelsActions from 'app/main/apps/mail-ngrx/store/actions/labels.actions';\r\n\r\nexport interface LabelsState\r\n{\r\n    entities?: { [id: number]: any };\r\n    loading: boolean;\r\n    loaded: boolean;\r\n}\r\n\r\nexport const LabelsInitialState: LabelsState = {\r\n    entities: {},\r\n    loading : false,\r\n    loaded  : false\r\n};\r\n\r\nexport function LabelsReducer(state = LabelsInitialState, action: LabelsActions.LabelsActionsAll): LabelsState\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case LabelsActions.GET_LABELS:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                loaded : false\r\n            };\r\n        case LabelsActions.GET_LABELS_SUCCESS:\r\n\r\n            const labels = action.payload;\r\n            const entities = labels.reduce(\r\n                (_entities: { [id: number]: any }, label: any) => {\r\n                    return {\r\n                        ..._entities,\r\n                        [label.id]: label\r\n                    };\r\n                }, {});\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : true,\r\n                entities\r\n            };\r\n\r\n        case LabelsActions.GET_LABELS_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\n\r\nimport * as FiltersActions from 'app/main/apps/mail-ngrx/store/actions/filters.actions';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Injectable()\r\nexport class FiltersEffect\r\n{\r\n    constructor(\r\n        private actions: Actions,\r\n        private mailService: MailNgrxService\r\n    )\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Get filters from Server\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    getFilters: Observable<FiltersActions.FiltersActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<FiltersActions.GetFilters>(FiltersActions.GET_FILTERS),\r\n                switchMap((action) => {\r\n                        return this.mailService.getFilters()\r\n                                   .pipe(\r\n                                       map((filters: any) => {\r\n                                           return new FiltersActions.GetFiltersSuccess(filters);\r\n                                       }),\r\n                                       catchError(err => of(new FiltersActions.GetFiltersFailed(err)))\r\n                                   );\r\n                    }\r\n                ));\r\n}\r\n","import { Action } from '@ngrx/store';\r\n\r\nexport const GET_LABELS = '[LABELS] GET LABELS';\r\nexport const GET_LABELS_SUCCESS = '[LABELS] GET LABELS SUCCESS';\r\nexport const GET_LABELS_FAILED = '[LABELS] GET LABELS FAILED';\r\n\r\n/**\r\n * Get Labels\r\n */\r\nexport class GetLabels implements Action\r\n{\r\n    readonly type = GET_LABELS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Labels Success\r\n */\r\nexport class GetLabelsSuccess implements Action\r\n{\r\n    readonly type = GET_LABELS_SUCCESS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Labels Failed\r\n */\r\nexport class GetLabelsFailed implements Action\r\n{\r\n    readonly type = GET_LABELS_FAILED;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\nexport type LabelsActionsAll\r\n    = GetLabels\r\n    | GetLabelsSuccess\r\n    | GetLabelsFailed;\r\n","import { createSelector } from '@ngrx/store';\r\nimport { LabelsState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\r\n\r\nexport const getLabelsState = createSelector(\r\n    getMailAppState,\r\n    (state: MailAppState) => state.labels\r\n);\r\n\r\nexport const getLabels = createSelector(\r\n    getLabelsState,\r\n    (state: LabelsState) => state.entities\r\n);\r\n\r\nexport const getLabelsLoaded = createSelector(\r\n    getLabelsState,\r\n    (state: LabelsState) => state.loaded\r\n);\r\n\r\nexport const getLabelsArr = createSelector(\r\n    getLabels,\r\n    (entities) => Object.keys(entities).map((id) => entities[id])\r\n);\r\n","export const locale = {\r\n    lang: 'en',\r\n    data: {\r\n        MAIL: {\r\n            COMPOSE                 : 'COMPOSE',\r\n            FOLDERS                 : 'FOLDERS',\r\n            FILTERS                 : 'FILTERS',\r\n            LABELS                  : 'LABELS',\r\n            NO_MESSAGES             : 'There are no messages!',\r\n            SELECT_A_MESSAGE_TO_READ: 'Select a message to read',\r\n            SEARCH_PLACEHOLDER: 'Search for an e-mail or contact'\r\n        }\r\n    }\r\n};\r\n","import { StoreModule } from '@ngrx/store';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\n\r\nimport { reducers } from 'app/main/apps/mail-ngrx/store/reducers';\r\nimport { effects } from 'app/main/apps/mail-ngrx/store/effects';\r\n\r\n@NgModule({\r\n    imports  : [\r\n        StoreModule.forFeature('mail-app', reducers),\r\n        EffectsModule.forFeature(effects)\r\n    ],\r\n    providers: []\r\n})\r\nexport class MailNgrxStoreModule\r\n{\r\n}\r\n","import { Component, Inject, ViewEncapsulation } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector     : 'mail-ngrx-compose',\r\n    templateUrl  : './compose.component.html',\r\n    styleUrls    : ['./compose.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MailNgrxComposeDialogComponent\r\n{\r\n    composeForm: FormGroup;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {MatDialogRef<MailNgrxComposeDialogComponent>} matDialogRef\r\n     * @param _data\r\n     * @param {FormBuilder} _formBuilder\r\n     */\r\n    constructor(\r\n        public matDialogRef: MatDialogRef<MailNgrxComposeDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) private _data: any,\r\n        private _formBuilder: FormBuilder\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.composeForm = this.createComposeForm();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Create compose form\r\n     *\r\n     * @returns {FormGroup}\r\n     */\r\n    createComposeForm(): FormGroup\r\n    {\r\n        return this._formBuilder.group({\r\n            from   : {\r\n                value   : ['johndoe@creapond.com'],\r\n                disabled: [true]\r\n            },\r\n            to     : [''],\r\n            cc     : [''],\r\n            bcc    : [''],\r\n            subject: [''],\r\n            message: ['']\r\n        });\r\n\r\n    }\r\n\r\n}\r\n","<div class=\"dialog-content-wrapper\">\r\n    <mat-toolbar class=\"mat-accent m-0\">\r\n        <mat-toolbar-row fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <span class=\"title dialog-title\">New Message</span>\r\n            <button mat-icon-button (click)=\"matDialogRef.close()\" aria-label=\"Close dialog\">\r\n                <mat-icon>close</mat-icon>\r\n            </button>\r\n        </mat-toolbar-row>\r\n    </mat-toolbar>\r\n\r\n    <div mat-dialog-content class=\"p-24 m-0\" fusePerfectScrollbar>\r\n\r\n        <form name=\"composeForm\" [formGroup]=\"composeForm\" class=\"compose-form\" fxLayout=\"column\" fxFlex>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>From</mat-label>\r\n                <input matInput name=\"from\"\r\n                       formControlName=\"from\"\r\n                       type=\"email\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>To</mat-label>\r\n                <input matInput name=\"to\"\r\n                       formControlName=\"to\"\r\n                       type=\"email\" required>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Cc</mat-label>\r\n                <input matInput\r\n                       name=\"cc\"\r\n                       formControlName=\"cc\"\r\n                       type=\"email\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Bcc</mat-label>\r\n                <input matInput\r\n                       name=\"bcc\"\r\n                       formControlName=\"bcc\"\r\n                       type=\"email\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Subject</mat-label>\r\n                <input matInput name=\"subject\"\r\n                       formControlName=\"subject\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Message</mat-label>\r\n                <textarea matInput name=\"message\"\r\n                          formControlName=\"message\"\r\n                          rows=\"6\">\r\n                </textarea>\r\n            </mat-form-field>\r\n\r\n            <div class=\"attachment-list\">\r\n\r\n                <div class=\"attachment\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                    <div>\r\n                        <span class=\"filename\">attachment-2.doc</span>\r\n                        <span class=\"size ml-4\">(12 Kb)</span>\r\n                    </div>\r\n\r\n                    <button mat-icon-button aria-label=\"Delete attachment\">\r\n                        <mat-icon class=\"s-16\">close</mat-icon>\r\n                    </button>\r\n                </div>\r\n\r\n                <div class=\"attachment\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                    <div>\r\n                        <span class=\"filename\">attachment-1.jpg</span>\r\n                        <span class=\"size ml-4\">(350 Kb)</span>\r\n                    </div>\r\n\r\n                    <button mat-icon-button aria-label=\"Delete attachment\">\r\n                        <mat-icon class=\"s-16\">close</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n\r\n    <div mat-dialog-actions class=\"m-0 p-16\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n        <div>\r\n            <button mat-raised-button\r\n                    color=\"accent\"\r\n                    (click)=\"matDialogRef.close(['send',composeForm])\"\r\n                    class=\"save-button\"\r\n                    [disabled]=\"composeForm.invalid\"\r\n                    aria-label=\"SAVE\">\r\n                SEND\r\n            </button>\r\n\r\n            <button mat-icon-button matTooltip=\"Attach a file\">\r\n                <mat-icon>attach_file</mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <button mat-icon-button (click)=\"matDialogRef.close(['delete',composeForm])\" aria-label=\"Delete\"\r\n                matTooltip=\"Delete\">\r\n            <mat-icon>delete</mat-icon>\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, ViewEncapsulation } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Component({\r\n    selector       : 'mail-ngrx-details',\r\n    templateUrl    : './mail-details.component.html',\r\n    styleUrls      : ['./mail-details.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation  : ViewEncapsulation.None\r\n})\r\nexport class MailNgrxDetailsComponent implements OnChanges\r\n{\r\n    @Input()\r\n    currentMail: Mail;\r\n\r\n    labels$: Observable<any>;\r\n    mail: Mail;\r\n    showDetails: boolean;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {MailNgrxService} _mailNgrxService\r\n     * @param {Store<MailAppState>} _store\r\n     */\r\n    constructor(\r\n        private _mailNgrxService: MailNgrxService,\r\n        private _store: Store<fromStore.MailAppState>\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\r\n        this.showDetails = false;\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On changes\r\n     */\r\n    ngOnChanges(): void\r\n    {\r\n        this.updateModel(this.currentMail);\r\n        this.markAsRead();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Mark as read\r\n     */\r\n    markAsRead(): void\r\n    {\r\n        if ( this.mail && !this.mail.read )\r\n        {\r\n            this.mail.markRead();\r\n            this.updateMail();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle star\r\n     *\r\n     * @param event\r\n     */\r\n    toggleStar(event): void\r\n    {\r\n        event.stopPropagation();\r\n        this.mail.toggleStar();\r\n        this.updateMail();\r\n    }\r\n\r\n    /**\r\n     * Toggle important\r\n     *\r\n     * @param event\r\n     */\r\n    toggleImportant(event): void\r\n    {\r\n        event.stopPropagation();\r\n        this.mail.toggleImportant();\r\n        this.updateMail();\r\n    }\r\n\r\n    /**\r\n     * Update model\r\n     *\r\n     * @param data\r\n     */\r\n    updateModel(data): void\r\n    {\r\n        this.mail = !data ? null : new Mail({...data});\r\n    }\r\n\r\n    /**\r\n     * Update the mail\r\n     */\r\n    updateMail(): void\r\n    {\r\n        this._store.dispatch(new fromStore.UpdateMail(this.mail));\r\n        this.updateModel(this.mail);\r\n    }\r\n}\r\n","<div *ngIf=\"!mail\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlex>\r\n    <mat-icon class=\"s-128 mb-16 select-message-icon hint-text\">\r\n        email\r\n    </mat-icon>\r\n    <span class=\"select-message-text hint-text\">\r\n        <span>{{ 'MAIL.SELECT_A_MESSAGE_TO_READ' | translate }}</span>\r\n    </span>\r\n</div>\r\n\r\n<div *ngIf=\"mail\">\r\n\r\n    <div class=\"mail-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n\r\n        <div>\r\n            <div class=\"subject\">{{mail.subject}}</div>\r\n\r\n            <div class=\"labels mt-8\" fxLayout=\"row wrap\">\r\n                <div class=\"label\" *ngFor=\"let labelId of mail.labels\"\r\n                     fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                    <div class=\"label-color\" [ngStyle]=\"{'background-color': (labels$ | async) | getById:labelId:'color'}\"></div>\r\n                    <div class=\"label-title\">{{(labels$ | async) | getById:labelId:'title'}}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"actions\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <button mat-icon-button (click)=\"toggleStar($event)\" aria-label=\"Toggle star\">\r\n                <mat-icon class=\"amber-fg\" *ngIf=\"mail.starred\">star</mat-icon>\r\n                <mat-icon class=\"secondary-text\" *ngIf=\"!mail.starred\">star_border</mat-icon>\r\n            </button>\r\n\r\n            <button mat-icon-button (click)=\"toggleImportant($event)\" aria-label=\"Toggle important\">\r\n                <mat-icon class=\"red-fg\" *ngIf=\"mail.important\">label</mat-icon>\r\n                <mat-icon class=\"secondary-text\" *ngIf=\"!mail.important\">label_outline</mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"mail-content\">\r\n\r\n        <div class=\"info\" fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n            <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"start start\">\r\n\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\r\n\r\n                    <div>\r\n                        <img *ngIf=\"mail.from.avatar\" alt=\"{{mail.from.name}}\"\r\n                             src=\"{{mail.from.avatar}}\" class=\"avatar\"/>\r\n\r\n                        <div *ngIf=\"!mail.from.avatar\" class=\"avatar\" ms-random-class=\"vm.colors\">\r\n                            {{mail.from.name[0]}}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\r\n\r\n                        <div class=\"name\">\r\n                            {{mail.from.name}}\r\n                        </div>\r\n\r\n                        <div class=\"to\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                            <div class=\"to-text\">to</div>\r\n                            <div>{{mail.to[0].name}}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <a class=\"toggle-details\" (click)=\"showDetails = !showDetails\">\r\n                    <span *ngIf=\"!showDetails\">Show Details</span>\r\n                    <span *ngIf=\"showDetails\">Hide Details</span>\r\n                </a>\r\n\r\n                <div *ngIf=\"showDetails\" class=\"details\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\r\n\r\n                    <div fxLayout=\"column\">\r\n                        <span class=\"title\">From:</span>\r\n                        <span class=\"title\">To:</span>\r\n                        <span class=\"title\">Date:</span>\r\n                    </div>\r\n\r\n                    <div fxLayout=\"column\">\r\n                        <span class=\"detail\">{{mail.from.email}}</span>\r\n                        <span class=\"detail\">{{mail.to[0].email}}</span>\r\n                        <span class=\"detail\">{{mail.time}}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <button mat-icon-button [matMenuTriggerFor]=\"moreMenu\" aria-label=\"More\" (click)=\"$event.stopPropagation()\">\r\n                <mat-icon>more_vert</mat-icon>\r\n            </button>\r\n\r\n            <mat-menu #moreMenu=\"matMenu\">\r\n                <button mat-menu-item aria-label=\"Reply\">\r\n                    <mat-icon>reply</mat-icon>\r\n                    <span>Reply</span>\r\n                </button>\r\n\r\n                <button mat-menu-item aria-label=\"Forward\">\r\n                    <mat-icon>forward</mat-icon>\r\n                    <span>Forward</span>\r\n                </button>\r\n\r\n                <button mat-menu-item aria-label=\"Print\">\r\n                    <mat-icon>print</mat-icon>\r\n                    <span>Print</span>\r\n                </button>\r\n            </mat-menu>\r\n        </div>\r\n\r\n        <div [innerHTML]=\"mail.message\"></div>\r\n\r\n    </div>\r\n\r\n    <div *ngIf=\"mail.attachments\" class=\"mail-attachments\">\r\n\r\n        <div class=\"title\">\r\n            <span>Attachments</span>\r\n            ({{mail.attachments.length}})\r\n        </div>\r\n\r\n        <div class=\"attachment-list\" fxLayout=\"row wrap\">\r\n\r\n            <div class=\"attachment\" fxLayout=\"column\"\r\n                 *ngFor=\"let attachment of mail.attachments\">\r\n\r\n                <img class=\"preview\" src=\"{{attachment.preview}}\">\r\n\r\n                <div fxLayout=\"column\">\r\n                    <a href=\"#\" onclick=\"event.preventDefault()\">View</a>\r\n                    <a href=\"#\" onclick=\"event.preventDefault()\">Download</a>\r\n                    <div class=\"size\">({{attachment.size}})</div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Action } from '@ngrx/store';\r\n\r\nexport const GET_FILTERS = '[FILTERS] GET FILTERS';\r\nexport const GET_FILTERS_SUCCESS = '[FILTERS] GET FILTERS SUCCESS';\r\nexport const GET_FILTERS_FAILED = '[FILTERS] GET FILTERS FAILED';\r\n\r\n/**\r\n * Get Filters\r\n */\r\nexport class GetFilters implements Action\r\n{\r\n    readonly type = GET_FILTERS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Filters Success\r\n */\r\nexport class GetFiltersSuccess implements Action\r\n{\r\n    readonly type = GET_FILTERS_SUCCESS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Filters Failed\r\n */\r\nexport class GetFiltersFailed implements Action\r\n{\r\n    readonly type = GET_FILTERS_FAILED;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\nexport type FiltersActionsAll\r\n    = GetFilters\r\n    | GetFiltersSuccess\r\n    | GetFiltersFailed;\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\nimport { MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\r\nimport { getFiltersArr, getFoldersArr, getLabelsArr, getMailsArr } from 'app/main/apps/mail-ngrx/store/selectors';\r\n\r\n@Injectable()\r\nexport class MailNgrxService\r\n{\r\n    foldersArr: any;\r\n    filtersArr: any;\r\n    labelsArr: any;\r\n    selectedMails: Mail[];\r\n    mails: Mail[];\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {HttpClient} _httpClient\r\n     * @param {Store<MailAppState>} _store\r\n     */\r\n    constructor(\r\n        private _httpClient: HttpClient,\r\n        private _store: Store<MailAppState>\r\n    )\r\n    {\r\n        this._store\r\n            .pipe(select(getFoldersArr))\r\n            .subscribe(folders => {\r\n                this.foldersArr = folders;\r\n            });\r\n\r\n        this._store\r\n            .pipe(select(getFiltersArr))\r\n            .subscribe(filters => {\r\n                this.filtersArr = filters;\r\n            });\r\n\r\n        this._store\r\n            .pipe(select(getLabelsArr))\r\n            .subscribe(labels => {\r\n                this.labelsArr = labels;\r\n            });\r\n\r\n        this._store\r\n            .pipe(select(getMailsArr))\r\n            .subscribe(mails => {\r\n                this.mails = mails;\r\n            });\r\n\r\n        this.selectedMails = [];\r\n    }\r\n\r\n    /**\r\n     * Get all mails\r\n     *\r\n     * @returns {Observable<Mail[]>}\r\n     */\r\n    getAllMails(): Observable<Mail[]>\r\n    {\r\n        return this._httpClient.get<Mail[]>('api/mail-mails');\r\n    }\r\n\r\n    /**\r\n     * Get folders\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getFolders(): Observable<any>\r\n    {\r\n        return this._httpClient.get('api/mail-folders');\r\n    }\r\n\r\n    /**\r\n     * Get filters\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getFilters(): Observable<any>\r\n    {\r\n        return this._httpClient.get('api/mail-filters');\r\n    }\r\n\r\n    /**\r\n     * Get labels\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getLabels(): Observable<any>\r\n    {\r\n        return this._httpClient.get('api/mail-labels');\r\n    }\r\n\r\n    /**\r\n     * Get mails\r\n     *\r\n     * @param handle\r\n     * @returns {Observable<Mail[]>}\r\n     */\r\n    getMails(handle): Observable<Mail[]>\r\n    {\r\n        if ( handle.id === 'labelHandle' )\r\n        {\r\n            const labelId = this.labelsArr.find(label => label.handle === handle.value).id;\r\n            return this._httpClient.get<Mail[]>('api/mail-mails?labels=' + labelId);\r\n        }\r\n        else if ( handle.id === 'filterHandle' )\r\n        {\r\n            return this._httpClient.get<Mail[]>('api/mail-mails?' + handle.value + '=true');\r\n        }\r\n        else // folderHandle\r\n        {\r\n            const folderId = this.foldersArr.find(folder => folder.handle === handle.value).id;\r\n            return this._httpClient.get<any>('api/mail-mails?folder=' + folderId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the mail\r\n     *\r\n     * @param mail\r\n     * @returns {Promise<any>}\r\n     */\r\n    updateMail(mail): any\r\n    {\r\n        return this._httpClient.post('api/mail-mails/' + mail.id, {...mail});\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\n\r\nimport * as LabelsActions from '../actions/labels.actions';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Injectable()\r\nexport class LabelsEffect\r\n{\r\n    constructor(\r\n        private actions: Actions,\r\n        private mailService: MailNgrxService\r\n    )\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Get Labels from Server\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    getLabels: Observable<LabelsActions.LabelsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<LabelsActions.GetLabels>(LabelsActions.GET_LABELS),\r\n                switchMap((action) => {\r\n                        return this.mailService.getLabels()\r\n                                   .pipe(\r\n                                       map((labels: any) => {\r\n                                           return new LabelsActions.GetLabelsSuccess(labels);\r\n                                       }),\r\n                                       catchError(err => of(new LabelsActions.GetLabelsFailed(err)))\r\n                                   );\r\n                    }\r\n                ));\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\n\r\nimport * as FoldersActions from 'app/main/apps/mail-ngrx/store/actions/folders.actions';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Injectable()\r\nexport class FoldersEffect\r\n{\r\n    constructor(\r\n        private actions: Actions,\r\n        private mailService: MailNgrxService\r\n    )\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Get Folders from Server\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    getFolders: Observable<FoldersActions.FoldersActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<FoldersActions.GetFolders>(FoldersActions.GET_FOLDERS),\r\n                switchMap((action) => {\r\n                        return this.mailService.getFolders()\r\n                                   .pipe(\r\n                                       map((folders: any) => {\r\n                                           return new FoldersActions.GetFoldersSuccess(folders);\r\n                                       }),\r\n                                       catchError(err => of(new FoldersActions.GetFoldersFailed(err)))\r\n                                   );\r\n                    }\r\n                ));\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { FuseSharedModule } from '@fuse/shared.module';\r\nimport { FuseSidebarModule } from '@fuse/components';\r\n\r\nimport * as fromGuards from 'app/main/apps/mail-ngrx/store/guards/index';\r\nimport { MailNgrxStoreModule } from 'app/main/apps/mail-ngrx/store/store.module';\r\nimport { MailNgrxComponent } from 'app/main/apps/mail-ngrx/mail.component';\r\nimport { MailNgrxListComponent } from 'app/main/apps/mail-ngrx/mail-list/mail-list.component';\r\nimport { MailNgrxListItemComponent } from 'app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component';\r\nimport { MailNgrxDetailsComponent } from 'app/main/apps/mail-ngrx/mail-details/mail-details.component';\r\nimport { MailNgrxMainSidebarComponent } from 'app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component';\r\nimport { MailNgrxComposeDialogComponent } from 'app/main/apps/mail-ngrx/dialogs/compose/compose.component';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path       : 'label/:labelHandle',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path       : 'label/:labelHandle/:mailId',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path       : 'filter/:filterHandle',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path       : 'filter/:filterHandle/:mailId',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path       : ':folderHandle',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path       : ':folderHandle/:mailId',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path      : '**',\r\n        redirectTo: 'inbox'\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    declarations   : [\r\n        MailNgrxComponent,\r\n        MailNgrxListComponent,\r\n        MailNgrxListItemComponent,\r\n        MailNgrxDetailsComponent,\r\n        MailNgrxMainSidebarComponent,\r\n        MailNgrxComposeDialogComponent\r\n    ],\r\n    imports        : [\r\n        RouterModule.forChild(routes),\r\n\r\n        MatButtonModule,\r\n        MatCheckboxModule,\r\n        MatDialogModule,\r\n        MatFormFieldModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatMenuModule,\r\n        MatRippleModule,\r\n        MatSelectModule,\r\n        MatToolbarModule,\r\n\r\n        TranslateModule,\r\n\r\n        FuseSharedModule,\r\n        FuseSidebarModule,\r\n\r\n        MailNgrxStoreModule\r\n    ],\r\n    providers      : [\r\n        MailNgrxService,\r\n        fromGuards.ResolveGuard\r\n    ],\r\n    entryComponents: [MailNgrxComposeDialogComponent]\r\n})\r\nexport class MailNgrxModule\r\n{\r\n}\r\n","import { createSelector } from '@ngrx/store';\r\nimport { FiltersState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\r\n\r\nexport const getFiltersState = createSelector(\r\n    getMailAppState,\r\n    (state: MailAppState) => state.filters\r\n);\r\n\r\nexport const getFilters = createSelector(\r\n    getFiltersState,\r\n    (state: FiltersState) => state.entities\r\n);\r\n\r\nexport const getFiltersLoaded = createSelector(\r\n    getFiltersState,\r\n    (state: FiltersState) => state.loaded\r\n);\r\n\r\nexport const getFiltersArr = createSelector(\r\n    getFilters,\r\n    (entities) => Object.keys(entities).map((id) => entities[id])\r\n);\r\n","import { ActionReducerMap, createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { MailsReducer, MailsState } from './mails.reducer';\r\nimport { FoldersReducer, FoldersState } from './folders.reducer';\r\nimport { FiltersReducer, FiltersState } from './filters.reducer';\r\nimport { LabelsReducer, LabelsState } from './labels.reducer';\r\n\r\nexport interface MailAppState\r\n{\r\n    mails: MailsState;\r\n    folders: FoldersState;\r\n    filters: FiltersState;\r\n    labels: LabelsState;\r\n}\r\n\r\nexport const getMailAppState = createFeatureSelector<MailAppState>(\r\n    'mail-app'\r\n);\r\n\r\nexport const getAppState = createSelector(\r\n    getMailAppState,\r\n    (state: MailAppState) => state\r\n);\r\n\r\nexport const reducers: ActionReducerMap<MailAppState> = {\r\n    mails  : MailsReducer,\r\n    folders: FoldersReducer,\r\n    filters: FiltersReducer,\r\n    labels : LabelsReducer\r\n};\r\n\r\nexport * from './mails.reducer';\r\nexport * from './folders.reducer';\r\nexport * from './filters.reducer';\r\nexport * from './labels.reducer';\r\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\r\nimport { MailNgrxComposeDialogComponent } from 'app/main/apps/mail-ngrx/dialogs/compose/compose.component';\r\n\r\n@Component({\r\n    selector       : 'mail-ngrx-main-sidebar',\r\n    templateUrl    : './main-sidebar.component.html',\r\n    styleUrls      : ['./main-sidebar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation  : ViewEncapsulation.None\r\n})\r\nexport class MailNgrxMainSidebarComponent\r\n{\r\n    labels: any[];\r\n    accounts: object;\r\n    selectedAccount: string;\r\n    dialogRef: any;\r\n\r\n    folders$: Observable<any>;\r\n    filters$: Observable<any>;\r\n    labels$: Observable<any>;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {MailNgrxService} _mailNgrxService\r\n     * @param {MatDialog} _matDialog\r\n     * @param {Store<MailAppState>} _store\r\n     */\r\n    constructor(\r\n        private _mailNgrxService: MailNgrxService,\r\n        private _matDialog: MatDialog,\r\n        private _store: Store<fromStore.MailAppState>\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.accounts = {\r\n            creapond    : 'johndoe@creapond.com',\r\n            withinpixels: 'johndoe@withinpixels.com'\r\n        };\r\n        this.selectedAccount = 'creapond';\r\n        this.folders$ = this._store.pipe(select(fromStore.getFoldersArr));\r\n        this.filters$ = this._store.pipe(select(fromStore.getFiltersArr));\r\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Compose dialog\r\n     */\r\n    composeDialog(): void\r\n    {\r\n        this.dialogRef = this._matDialog.open(MailNgrxComposeDialogComponent, {\r\n            panelClass: 'mail-ngrx-compose-dialog'\r\n        });\r\n\r\n        this.dialogRef.afterClosed()\r\n            .subscribe(response => {\r\n                if ( !response )\r\n                {\r\n                    return;\r\n                }\r\n                const actionType: string = response[0];\r\n                const formData: FormGroup = response[1];\r\n                switch ( actionType )\r\n                {\r\n                    /**\r\n                     * Send\r\n                     */\r\n                    case 'send':\r\n                        console.log('new Mail', formData.getRawValue());\r\n                        break;\r\n                    /**\r\n                     * Delete\r\n                     */\r\n                    case 'delete':\r\n                        console.log('delete Mail');\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n}\r\n","<!-- SIDEBAR HEADER -->\r\n<div fxLayout=\"column\" fxLayoutAlign=\"space-between start\"\r\n     class=\"header accent p-24 pb-4\">\r\n\r\n    <div class=\"logo\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <mat-icon class=\"logo-icon s-32\">mail</mat-icon>\r\n        <span class=\"logo-text\">MailboxNgrx</span>\r\n    </div>\r\n\r\n    <div class=\"account\" fxLayout=\"column\">\r\n        <div class=\"title\">John Doe</div>\r\n        <mat-form-field floatLabel=\"never\">\r\n            <mat-select class=\"account-selection\" placeholder=\"Mail Selection\"\r\n                        [ngModel]=\"selectedAccount\">\r\n                <mat-option *ngFor=\"let account of (accounts | keys)\" [value]=\"account.key\">\r\n                    {{account.value}}\r\n                </mat-option>\r\n            </mat-select>\r\n        </mat-form-field>\r\n    </div>\r\n\r\n</div>\r\n<!-- / SIDEBAR HEADER -->\r\n\r\n<!-- SIDEBAR CONTENT -->\r\n<div class=\"content\" fusePerfectScrollbar>\r\n\r\n    <div class=\"px-24 pt-32 pb-12\">\r\n        <button mat-raised-button\r\n                class=\"mat-accent compose-dialog-button w-100-p\"\r\n                (click)=\"composeDialog()\"\r\n                aria-label=\"Compose\">\r\n            {{ 'MAIL.COMPOSE' | translate }}\r\n        </button>\r\n    </div>\r\n\r\n    <div class=\"nav material2\">\r\n\r\n        <div class=\"nav-subheader\">{{ 'MAIL.FOLDERS' | translate }}</div>\r\n\r\n        <div class=\"nav-item\" *ngFor=\"let folder of (folders$ | async)\">\r\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/' + folder.handle\"\r\n               [routerLinkActive]=\"['active', 'accent']\">\r\n                <mat-icon class=\"nav-link-icon\" *ngIf=\"folder.icon\">{{folder.icon}}</mat-icon>\r\n                <span>{{folder.title}}</span>\r\n            </a>\r\n        </div>\r\n\r\n        <div class=\"nav-subheader\">{{ 'MAIL.FILTERS' | translate }}</div>\r\n\r\n        <div class=\"nav-item\" *ngFor=\"let filter of (filters$ | async)\">\r\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/filter/' + filter.handle\"\r\n               [routerLinkActive]=\"['active', 'accent']\">\r\n                <mat-icon class=\"nav-link-icon\" [ngClass]=\"filter.color\" *ngIf=\"filter.icon\">{{filter.icon}}</mat-icon>\r\n                <span>{{filter.title}}</span>\r\n            </a>\r\n        </div>\r\n\r\n        <div class=\"nav-subheader\">{{ 'MAIL.LABELS' | translate }}</div>\r\n\r\n        <div class=\"nav-item\" *ngFor=\"let label of (labels$ | async)\">\r\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/label/' + label.handle\"\r\n               [routerLinkActive]=\"['active', 'accent']\">\r\n                <mat-icon class=\"nav-link-icon\" [ngStyle]=\"{'color':label.color}\">label</mat-icon>\r\n                <span>{{label.title}}</span>\r\n            </a>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n<!-- / SIDEBAR CONTENT -->\r\n","import { createSelector } from '@ngrx/store';\r\nimport { FoldersState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\r\n\r\nexport const getFoldersState = createSelector(\r\n    getMailAppState,\r\n    (state: MailAppState) => state.folders\r\n);\r\n\r\nexport const getFolders = createSelector(\r\n    getFoldersState,\r\n    (state: FoldersState) => state.entities\r\n);\r\n\r\nexport const getFoldersLoaded = createSelector(\r\n    getFoldersState,\r\n    (state: FoldersState) => state.loaded\r\n);\r\n\r\nexport const getFoldersArr = createSelector(\r\n    getFolders,\r\n    (entities) => Object.keys(entities).map((id) => entities[id])\r\n);\r\n","export * from './mails.actions';\r\nexport * from './folders.actions';\r\nexport * from './filters.actions';\r\nexport * from './labels.actions';\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\r\nimport { RouterStateSnapshot } from '@angular/router';\r\nimport { select, Store } from '@ngrx/store';\r\n\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { map, switchMap, catchError, tap, take, filter } from 'rxjs/operators';\r\n\r\nimport { MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\r\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\r\nimport { getFiltersLoaded, getFoldersLoaded, getLabelsLoaded, getMailsLoaded } from 'app/main/apps/mail-ngrx/store/selectors';\r\nimport { getRouterState } from 'app/store/reducers';\r\n\r\n@Injectable()\r\nexport class ResolveGuard implements CanActivate\r\n{\r\n    routerState: any;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {Store<MailAppState>} _store\r\n     */\r\n    constructor(\r\n        private _store: Store<MailAppState>\r\n    )\r\n    {\r\n        this._store\r\n            .pipe(select(getRouterState))\r\n            .subscribe(routerState => {\r\n                if ( routerState )\r\n                {\r\n                    this.routerState = routerState.state;\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Can activate\r\n     *\r\n     * @param {ActivatedRouteSnapshot} route\r\n     * @param {RouterStateSnapshot} state\r\n     * @returns {Observable<boolean>}\r\n     */\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean>\r\n    {\r\n        return this.checkStore().pipe(\r\n            switchMap(() => of(true)),\r\n            catchError(() => of(false))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Check store\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    checkStore(): Observable<any>\r\n    {\r\n        return forkJoin(\r\n            this.getFolders(),\r\n            this.getFilters(),\r\n            this.getLabels()\r\n        ).pipe(\r\n            filter(([foldersLoaded, filtersLoaded, labelsLoaded]) => !!(foldersLoaded && filtersLoaded && labelsLoaded)),\r\n            take(1),\r\n            switchMap(() =>\r\n                this.getMails()\r\n            ),\r\n            take(1),\r\n            map(() => this._store.dispatch(new fromStore.SetCurrentMail(this.routerState.params.mailId)))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get folders\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getFolders(): any\r\n    {\r\n        return this._store.pipe(\r\n            select(getFoldersLoaded),\r\n            tap(loaded => {\r\n                if ( !loaded )\r\n                {\r\n                    this._store.dispatch(new fromStore.GetFolders([]));\r\n                }\r\n            }),\r\n            filter(loaded => loaded),\r\n            take(1)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get Filters\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getFilters(): any\r\n    {\r\n        return this._store.pipe(\r\n            select(getFiltersLoaded),\r\n            tap(loaded => {\r\n                if ( !loaded )\r\n                {\r\n                    this._store.dispatch(new fromStore.GetFilters([]));\r\n                }\r\n            }),\r\n            filter(loaded => loaded),\r\n            take(1)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get Labels\r\n     * @returns {Observable<any>}\r\n     */\r\n    getLabels(): any\r\n    {\r\n        return this._store.pipe(\r\n            select(getLabelsLoaded),\r\n            tap(loaded => {\r\n                if ( !loaded )\r\n                {\r\n                    this._store.dispatch(new fromStore.GetLabels([]));\r\n                }\r\n            }),\r\n            filter(loaded => loaded),\r\n            take(1)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get Mails\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getMails(): any\r\n    {\r\n        return this._store.pipe(\r\n            select(getMailsLoaded),\r\n            tap((loaded: any) => {\r\n\r\n                if ( !this.routerState.params[loaded.id] || this.routerState.params[loaded.id] !== loaded.value )\r\n                {\r\n                    this._store.dispatch(new fromStore.GetMails());\r\n                    this._store.dispatch(new fromStore.SetSearchText(''));\r\n                    this._store.dispatch(new fromStore.DeselectAllMails());\r\n                }\r\n            }),\r\n            filter((loaded: any) => {\r\n                return this.routerState.params[loaded.id] && this.routerState.params[loaded.id] === loaded.value;\r\n            }),\r\n            take(1)\r\n        );\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { FuseSidebarService } from '@fuse/components/sidebar/sidebar.service';\r\nimport { FuseTranslationLoaderService } from '@fuse/services/translation-loader.service';\r\n\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\r\n\r\nimport { locale as english } from 'app/main/apps/mail-ngrx/i18n/en';\r\nimport { locale as turkish } from 'app/main/apps/mail-ngrx/i18n/tr';\r\n\r\n@Component({\r\n    selector       : 'mail-ngrx',\r\n    templateUrl    : './mail.component.html',\r\n    styleUrls      : ['./mail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation  : ViewEncapsulation.None\r\n})\r\nexport class MailNgrxComponent implements OnInit, OnDestroy\r\n{\r\n    hasSelectedMails: boolean;\r\n    isIndeterminate: boolean;\r\n    searchInput: FormControl;\r\n    mails$: Observable<any>;\r\n    folders$: Observable<any>;\r\n    labels$: Observable<any>;\r\n    currentMail$: Observable<Mail>;\r\n    selectedMailIds$: Observable<string[]>;\r\n    searchText$: Observable<string>;\r\n    mails: Mail[];\r\n    selectedMailIds: string[];\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {ChangeDetectorRef} _changeDetectorRef\r\n     * @param {FuseSidebarService} _fuseSidebarService\r\n     * @param {FuseTranslationLoaderService} _fuseTranslationLoaderService\r\n     * @param {MailNgrxService} _mailNgrxService\r\n     * @param {Store<MailAppState>} _store\r\n     */\r\n    constructor(\r\n        private _changeDetectorRef: ChangeDetectorRef,\r\n        private _fuseSidebarService: FuseSidebarService,\r\n        private _fuseTranslationLoaderService: FuseTranslationLoaderService,\r\n        private _mailNgrxService: MailNgrxService,\r\n        private _store: Store<fromStore.MailAppState>\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.searchInput = new FormControl('');\r\n        this._fuseTranslationLoaderService.loadTranslations(english, turkish);\r\n        this.currentMail$ = this._store.pipe(select(fromStore.getCurrentMail));\r\n        this.mails$ = this._store.pipe(select(fromStore.getMailsArr));\r\n        this.folders$ = this._store.pipe(select(fromStore.getFoldersArr));\r\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\r\n        this.selectedMailIds$ = this._store.pipe(select(fromStore.getSelectedMailIds));\r\n        this.searchText$ = this._store.pipe(select(fromStore.getSearchText));\r\n        this.mails = [];\r\n        this.selectedMailIds = [];\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        this.mails$.subscribe(mails => {\r\n            this.mails = mails;\r\n        });\r\n\r\n        this.selectedMailIds$\r\n            .subscribe(selectedMailIds => {\r\n                this.selectedMailIds = selectedMailIds;\r\n                this.hasSelectedMails = selectedMailIds.length > 0;\r\n                this.isIndeterminate = (selectedMailIds.length !== this.mails.length && selectedMailIds.length > 0);\r\n                this.refresh();\r\n            });\r\n\r\n        this.searchText$.subscribe(searchText => {\r\n            this.searchInput.setValue(searchText);\r\n        });\r\n\r\n        this.searchInput.valueChanges.pipe(\r\n            debounceTime(300),\r\n            distinctUntilChanged()\r\n        ).subscribe(searchText => {\r\n            this._store.dispatch(new fromStore.SetSearchText(searchText));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n        this._changeDetectorRef.detach();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Toggle select all\r\n     *\r\n     * @param ev\r\n     */\r\n    toggleSelectAll(ev): void\r\n    {\r\n        ev.preventDefault();\r\n\r\n        if ( this.selectedMailIds.length && this.selectedMailIds.length > 0 )\r\n        {\r\n            this.deselectAllMails();\r\n        }\r\n        else\r\n        {\r\n            this.selectAllMails();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select all mails\r\n     */\r\n    selectAllMails(): void\r\n    {\r\n        this._store.dispatch(new fromStore.SelectAllMails());\r\n    }\r\n\r\n    /**\r\n     * Deselect all mails\r\n     */\r\n    deselectAllMails(): void\r\n    {\r\n        this._store.dispatch(new fromStore.DeselectAllMails());\r\n    }\r\n\r\n    /**\r\n     * Select mails by parameter\r\n     *\r\n     * @param parameter\r\n     * @param value\r\n     */\r\n    selectMailsByParameter(parameter, value): void\r\n    {\r\n        this._store.dispatch(new fromStore.SelectMailsByParameter({\r\n            parameter,\r\n            value\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Toggle label on selected mails\r\n     *\r\n     * @param labelId\r\n     */\r\n    toggleLabelOnSelectedMails(labelId): void\r\n    {\r\n        this._store.dispatch(new fromStore.AddLabelOnSelectedMails(labelId));\r\n    }\r\n\r\n    /**\r\n     * Set folder on selected mails\r\n     *\r\n     * @param folderId\r\n     */\r\n    setFolderOnSelectedMails(folderId): void\r\n    {\r\n        this._store.dispatch(new fromStore.SetFolderOnSelectedMails(folderId));\r\n    }\r\n\r\n    /**\r\n     * Deselect current mail\r\n     */\r\n    deselectCurrentMail(): void\r\n    {\r\n        this._store.dispatch(new fromStore.SetCurrentMail(''));\r\n    }\r\n\r\n    /**\r\n     * Refresh\r\n     */\r\n    refresh(): void\r\n    {\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    /**\r\n     * Toggle the sidebar\r\n     *\r\n     * @param name\r\n     */\r\n    toggleSidebar(name): void\r\n    {\r\n        this._fuseSidebarService.getSidebar(name).toggleOpen();\r\n    }\r\n}\r\n","<div id=\"mail\" class=\"page-layout carded left-sidebar inner-scroll\">\r\n\r\n    <!-- TOP BACKGROUND -->\r\n    <div class=\"top-bg accent\"></div>\r\n    <!-- / TOP BACKGROUND -->\r\n\r\n    <!-- SIDEBAR -->\r\n    <fuse-sidebar class=\"sidebar\" name=\"mail-ngrx-main-sidebar\" position=\"left\" lockedOpen=\"gt-md\">\r\n        <mail-ngrx-main-sidebar></mail-ngrx-main-sidebar>\r\n    </fuse-sidebar>\r\n    <!-- / SIDEBAR -->\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\">\r\n\r\n        <!-- CONTENT HEADER -->\r\n        <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n            <div class=\"search-wrapper\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n                <button mat-icon-button class=\"sidebar-toggle\" fxHide.gt-md\r\n                        (click)=\"toggleSidebar('mail-ngrx-main-sidebar')\">\r\n                    <mat-icon>menu</mat-icon>\r\n                </button>\r\n\r\n                <div class=\"search\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                    <mat-icon class=\"secondary-text\">search</mat-icon>\r\n                    <input [formControl]=\"searchInput\" [placeholder]=\"'MAIL.SEARCH_PLACEHOLDER' | translate\" fxFlex>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- / CONTENT HEADER -->\r\n\r\n        <!-- CONTENT CARD -->\r\n        <div class=\"content-card\" [ngClass]=\"{'current-mail-selected':currentMail$ | async}\">\r\n\r\n            <!-- CONTENT TOOLBAR -->\r\n            <div class=\"toolbar px-24 py-8\">\r\n\r\n                <div class=\"mail-selection\" fxFlex=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n                    <mat-checkbox (click)=\"toggleSelectAll($event)\"\r\n                                  [checked]=\"hasSelectedMails\"\r\n                                  [indeterminate]=\"isIndeterminate\">\r\n                    </mat-checkbox>\r\n\r\n                    <button mat-icon-button [matMenuTriggerFor]=\"selectMenu\">\r\n                        <mat-icon>arrow_drop_down</mat-icon>\r\n                    </button>\r\n                    <mat-menu #selectMenu=\"matMenu\">\r\n                        <button mat-menu-item (click)=\"selectAllMails()\">All</button>\r\n                        <button mat-menu-item (click)=\"deselectAllMails()\">None</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('read', true)\">Read</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('read', false)\">Unread</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('starred', true)\">Starred</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('starred', false)\">Unstarred</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('important', true)\">Important</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('important', false)\">Unimportant</button>\r\n                    </mat-menu>\r\n\r\n                    <div class=\"toolbar-separator\" *ngIf=\"hasSelectedMails\"></div>\r\n\r\n                    <button mat-icon-button (click)=\"setFolderOnSelectedMails(4)\" *ngIf=\"hasSelectedMails\">\r\n                        <mat-icon class=\"secondary-text\">delete</mat-icon>\r\n                    </button>\r\n\r\n                    <button mat-icon-button [matMenuTriggerFor]=\"folderMenu\" *ngIf=\"hasSelectedMails\">\r\n                        <mat-icon class=\"secondary-text\">folder</mat-icon>\r\n                    </button>\r\n                    <mat-menu #folderMenu=\"matMenu\">\r\n                        <button mat-menu-item *ngFor=\"let folder of folders$ | async\"\r\n                                (click)=\"setFolderOnSelectedMails(folder.id)\">{{folder.title}}\r\n                        </button>\r\n                    </mat-menu>\r\n\r\n                    <button mat-icon-button [matMenuTriggerFor]=\"labelMenu\" *ngIf=\"hasSelectedMails\">\r\n                        <mat-icon class=\"secondary-text\">label</mat-icon>\r\n                    </button>\r\n                    <mat-menu #labelMenu=\"matMenu\">\r\n                        <button mat-menu-item *ngFor=\"let label of labels$ | async\"\r\n                                (click)=\"toggleLabelOnSelectedMails(label.id)\">{{label.title}}\r\n                        </button>\r\n                    </mat-menu>\r\n                </div>\r\n\r\n                <div *ngIf=\"currentMail$ | async\" fxHide.gt-xs>\r\n                    <button mat-icon-button (click)=\"deselectCurrentMail()\">\r\n                        <mat-icon class=\"secondary-text\">arrow_back</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <!-- / CONTENT TOOLBAR -->\r\n\r\n            <!-- CONTENT -->\r\n            <div class=\"content\" fxLayout=\"row\">\r\n\r\n                <mail-ngrx-list fusePerfectScrollbar fxFlex [mails]=\"mails$ | async\" [currentMail]=\"currentMail$ | async\"></mail-ngrx-list>\r\n                <mail-ngrx-details [currentMail]=\"currentMail$ | async\" fusePerfectScrollbar fxFlex></mail-ngrx-details>\r\n\r\n            </div>\r\n            <!-- / CONTENT -->\r\n\r\n        </div>\r\n        <!-- / CONTENT CARD -->\r\n\r\n    </div>\r\n    <!-- / CENTER -->\r\n\r\n</div>\r\n","export * from './resolve.guard';\r\n","import * as FoldersActions from 'app/main/apps/mail-ngrx/store/actions/folders.actions';\r\n\r\nexport interface FoldersState\r\n{\r\n    entities?: { [id: number]: any };\r\n    loading: boolean;\r\n    loaded: boolean;\r\n}\r\n\r\nexport const FoldersInitialState: FoldersState = {\r\n    entities: {},\r\n    loading : false,\r\n    loaded  : false\r\n};\r\n\r\nexport function FoldersReducer(state = FoldersInitialState, action: FoldersActions.FoldersActionsAll): FoldersState\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case FoldersActions.GET_FOLDERS:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                loaded : false\r\n            };\r\n        case FoldersActions.GET_FOLDERS_SUCCESS:\r\n\r\n            const folders = action.payload;\r\n            const entities = folders.reduce(\r\n                (_entities: { [id: number]: any }, folder: any) => {\r\n                    return {\r\n                        ..._entities,\r\n                        [folder.id]: folder\r\n                    };\r\n                }, {});\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : true,\r\n                entities\r\n            };\r\n\r\n        case FoldersActions.GET_FOLDERS_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export * from './actions';\r\nexport * from './reducers';\r\nexport * from './selectors';\r\nexport * from './effects';\r\n","import { Action } from '@ngrx/store';\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\n\r\nexport const GET_MAILS = '[MAILS] GET MAILS';\r\nexport const GET_MAILS_SUCCESS = '[MAILS] GET MAILS SUCCESS';\r\nexport const GET_MAILS_FAILED = '[MAILS] GET MAILS FAILED';\r\nexport const SET_CURRENT_MAIL = '[MAILS] SET CURRENT MAIL';\r\nexport const SET_CURRENT_MAIL_SUCCESS = '[MAILS] SET CURRENT MAIL SUCCESS';\r\nexport const CHECK_CURRENT_MAIL = '[MAILS] CHECK CURRENT MAIL';\r\nexport const UPDATE_MAIL = '[MAILS] UPDATE MAIL';\r\nexport const UPDATE_MAIL_SUCCESS = '[MAILS] UPDATE MAIL SUCCESS';\r\nexport const UPDATE_MAILS = '[MAILS] UPDATE MAILS';\r\nexport const UPDATE_MAILS_SUCCESS = '[MAILS] UPDATE MAILS SUCCESS';\r\nexport const SET_SEARCH_TEXT = '[MAILS] SET SEARCH TEXT';\r\nexport const SELECT_ALL_MAILS = '[MAILS] SELECT ALL MAILS';\r\nexport const DESELECT_ALL_MAILS = '[MAILS] DESELECT ALL MAILS';\r\nexport const TOGGLE_IN_SELECTED_MAILS = '[MAILS] TOGGLE IN SELECTED MAILS';\r\nexport const SELECT_MAILS_BY_PARAMETER = '[MAILS] SELECT MAILS BY PARAMETER';\r\nexport const SET_FOLDER_ON_SELECTED_MAILS = '[MAILS] SET FOLDER ON SELECTED MAILS';\r\nexport const ADD_LABEL_ON_SELECTED_MAILS = '[MAILS] ADD LABEL ON SELECTED MAILS';\r\n\r\n/**\r\n * Get Mails\r\n */\r\nexport class GetMails implements Action\r\n{\r\n    readonly type = GET_MAILS;\r\n\r\n    constructor()\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Mails Success\r\n */\r\nexport class GetMailsSuccess implements Action\r\n{\r\n    readonly type = GET_MAILS_SUCCESS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Mails Failed\r\n */\r\nexport class GetMailsFailed implements Action\r\n{\r\n    readonly type = GET_MAILS_FAILED;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Set Current Mail\r\n */\r\nexport class SetCurrentMail implements Action\r\n{\r\n    readonly type = SET_CURRENT_MAIL;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Set Current Mail Success\r\n */\r\nexport class SetCurrentMailSuccess implements Action\r\n{\r\n    readonly type = SET_CURRENT_MAIL_SUCCESS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Check Current Mail\r\n */\r\nexport class CheckCurrentMail implements Action\r\n{\r\n    readonly type = CHECK_CURRENT_MAIL;\r\n\r\n    constructor()\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Update Mail\r\n */\r\nexport class UpdateMail implements Action\r\n{\r\n    readonly type = UPDATE_MAIL;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Update Mail Success\r\n */\r\nexport class UpdateMailSuccess implements Action\r\n{\r\n    readonly type = UPDATE_MAIL_SUCCESS;\r\n\r\n    constructor(public payload: Mail)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Update Mails\r\n */\r\nexport class UpdateMails implements Action\r\n{\r\n    readonly type = UPDATE_MAILS;\r\n\r\n    constructor(public payload: Mail[])\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Update Mails Success\r\n */\r\nexport class UpdateMailsSuccess implements Action\r\n{\r\n    readonly type = UPDATE_MAILS_SUCCESS;\r\n\r\n    constructor()\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Set Search Text\r\n */\r\nexport class SetSearchText implements Action\r\n{\r\n    readonly type = SET_SEARCH_TEXT;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Select All Mails\r\n */\r\nexport class SelectAllMails implements Action\r\n{\r\n    readonly type = SELECT_ALL_MAILS;\r\n\r\n    constructor()\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Deselect All Mails\r\n */\r\nexport class DeselectAllMails implements Action\r\n{\r\n    readonly type = DESELECT_ALL_MAILS;\r\n\r\n    constructor()\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Toggle In Selected Mails\r\n */\r\nexport class ToggleInSelectedMails implements Action\r\n{\r\n    readonly type = TOGGLE_IN_SELECTED_MAILS;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Select Mails by Parameter\r\n */\r\nexport class SelectMailsByParameter implements Action\r\n{\r\n    readonly type = SELECT_MAILS_BY_PARAMETER;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Set Folder on Selected Mails\r\n */\r\nexport class SetFolderOnSelectedMails implements Action\r\n{\r\n    readonly type = SET_FOLDER_ON_SELECTED_MAILS;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Add label on Selected Mails\r\n */\r\nexport class AddLabelOnSelectedMails implements Action\r\n{\r\n    readonly type = ADD_LABEL_ON_SELECTED_MAILS;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\nexport type MailsActionsAll\r\n    = GetMails\r\n    | GetMailsSuccess\r\n    | GetMailsFailed\r\n    | SetCurrentMail\r\n    | SetCurrentMailSuccess\r\n    | CheckCurrentMail\r\n    | UpdateMail\r\n    | UpdateMailSuccess\r\n    | UpdateMails\r\n    | UpdateMailsSuccess\r\n    | SetSearchText\r\n    | SelectAllMails\r\n    | DeselectAllMails\r\n    | ToggleInSelectedMails\r\n    | SelectMailsByParameter\r\n    | SetFolderOnSelectedMails\r\n    | AddLabelOnSelectedMails;\r\n","export const locale = {\r\n    lang: 'tr',\r\n    data: {\r\n        MAIL: {\r\n            COMPOSE                 : 'YENİ E-POSTA',\r\n            FOLDERS                 : 'KLASÖRLER',\r\n            FILTERS                 : 'FİLTRELER',\r\n            LABELS                  : 'ETİKETLER',\r\n            NO_MESSAGES             : 'Mesajiniz bulunmamakta!',\r\n            SELECT_A_MESSAGE_TO_READ: 'Okumak için bir mesaj seçin',\r\n            SEARCH_PLACEHOLDER      : 'E-mail yada bir kişi arayın'\r\n        }\r\n    }\r\n};\r\n","export class Mail\r\n{\r\n    id: string;\r\n    from: {\r\n        name: string,\r\n        avatar: string,\r\n        email: string\r\n    };\r\n    to: {\r\n        name: string,\r\n        email: string\r\n    }[];\r\n    subject: string;\r\n    message: string;\r\n    time: string;\r\n    read: boolean;\r\n    starred: boolean;\r\n    important: boolean;\r\n    hasAttachments: boolean;\r\n    attachments: {\r\n        type: string,\r\n        fileName: string,\r\n        preview: string,\r\n        url: string,\r\n        size: string\r\n    }[];\r\n    labels: string[];\r\n    folder: string;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param mail\r\n     */\r\n    constructor(mail)\r\n    {\r\n        this.id = mail.id;\r\n        this.from = mail.from;\r\n        this.to = mail.to;\r\n        this.subject = mail.subject;\r\n        this.message = mail.message;\r\n        this.time = mail.time;\r\n        this.read = mail.read;\r\n        this.starred = mail.starred;\r\n        this.important = mail.important;\r\n        this.hasAttachments = mail.hasAttachments;\r\n        this.attachments = mail.attachments;\r\n        this.labels = mail.labels;\r\n        this.folder = mail.folder;\r\n    }\r\n\r\n    /**\r\n     * Toggle star\r\n     */\r\n    toggleStar(): void\r\n    {\r\n        this.starred = !this.starred;\r\n    }\r\n\r\n    /**\r\n     * Toggle important\r\n     */\r\n    toggleImportant(): void\r\n    {\r\n        this.important = !this.important;\r\n    }\r\n\r\n    /**\r\n     * Mark as read\r\n     */\r\n    markRead(): void\r\n    {\r\n        this.read = true;\r\n    }\r\n\r\n    /**\r\n     * Mark as unread\r\n     */\r\n    markUnread(): void\r\n    {\r\n        this.read = false;\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Component({\r\n    selector       : 'mail-ngrx-list',\r\n    templateUrl    : './mail-list.component.html',\r\n    styleUrls      : ['./mail-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation  : ViewEncapsulation.None\r\n})\r\nexport class MailNgrxListComponent\r\n{\r\n    @Input()\r\n    mails: Mail[];\r\n\r\n    @Input()\r\n    currentMail: Mail[];\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {ActivatedRoute} _activatedRoute\r\n     * @param {MailNgrxService} _mailNgrxService\r\n     * @param {Router} _router\r\n     */\r\n    constructor(\r\n        private _activatedRoute: ActivatedRoute,\r\n        private _mailNgrxService: MailNgrxService,\r\n        private _router: Router\r\n    )\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Read mail\r\n     *\r\n     * @param mailId\r\n     */\r\n    readMail(mailId): void\r\n    {\r\n        const labelHandle  = this._activatedRoute.snapshot.params.labelHandle,\r\n              filterHandle = this._activatedRoute.snapshot.params.filterHandle,\r\n              folderHandle = this._activatedRoute.snapshot.params.folderHandle;\r\n\r\n        if ( labelHandle )\r\n        {\r\n            this._router.navigate(['apps/mail-ngrx/label/' + labelHandle + '/' + mailId]);\r\n        }\r\n        else if ( filterHandle )\r\n        {\r\n            this._router.navigate(['apps/mail-ngrx/filter/' + filterHandle + '/' + mailId]);\r\n        }\r\n        else\r\n        {\r\n            this._router.navigate(['apps/mail-ngrx/' + folderHandle + '/' + mailId]);\r\n        }\r\n    }\r\n}\r\n","<div *ngIf=\"mails.length === 0\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlexFill>\r\n    <span class=\"no-messages-text hint-text\">{{ 'MAIL.NO_MESSAGES' | translate }}</span>\r\n</div>\r\n\r\n<div class=\"mail-list\">\r\n    <mail-ngrx-list-item *ngFor=\"let mail of mails\" [mail]=\"mail\" (click)=\"readMail(mail.id)\"\r\n                    [ngClass]=\"{'current-mail':mail?.id == currentMail?.id}\">\r\n    </mail-ngrx-list-item>\r\n</div>\r\n","import * as MailsActions from 'app/main/apps/mail-ngrx/store/actions/mails.actions';\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\n\r\nexport interface MailsState\r\n{\r\n    entities?: { [id: number]: Mail };\r\n    currentMail: any;\r\n    selectedMailIds: string[];\r\n    searchText: string;\r\n    loading: boolean;\r\n    loaded: any;\r\n}\r\n\r\nexport const MailsInitialState: MailsState = {\r\n    entities       : {},\r\n    currentMail    : null,\r\n    selectedMailIds: [],\r\n    searchText     : '',\r\n    loading        : false,\r\n    loaded         : false\r\n};\r\n\r\nexport function MailsReducer(state = MailsInitialState, action: MailsActions.MailsActionsAll): MailsState\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case MailsActions.GET_MAILS:\r\n        {\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        }\r\n\r\n        case MailsActions.GET_MAILS_SUCCESS:\r\n        {\r\n\r\n            const mails = action.payload.mails;\r\n            const loaded = action.payload.loaded;\r\n            const entities = mails.reduce(\r\n                (_entities: { [id: number]: Mail }, mail: Mail) => {\r\n                    return {\r\n                        ..._entities,\r\n                        [mail.id]: mail\r\n                    };\r\n                }, {});\r\n\r\n            return {\r\n                ...state,\r\n                entities,\r\n                loading: false,\r\n                loaded\r\n            };\r\n        }\r\n\r\n        case MailsActions.GET_MAILS_FAILED:\r\n        {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : false\r\n            };\r\n        }\r\n\r\n        case MailsActions.SET_CURRENT_MAIL_SUCCESS:\r\n        {\r\n            return {\r\n                ...state,\r\n                currentMail: action.payload\r\n            };\r\n        }\r\n\r\n        case MailsActions.UPDATE_MAIL_SUCCESS:\r\n        {\r\n            return {\r\n                ...state,\r\n                entities: {\r\n                    ...state.entities,\r\n                    [action.payload.id]: action.payload\r\n                }\r\n            };\r\n        }\r\n\r\n        case MailsActions.SET_SEARCH_TEXT:\r\n        {\r\n\r\n            return {\r\n                ...state,\r\n                searchText: action.payload\r\n            };\r\n        }\r\n\r\n        case MailsActions.TOGGLE_IN_SELECTED_MAILS:\r\n        {\r\n\r\n            const mailId = action.payload;\r\n\r\n            let selectedMailIds = [...state.selectedMailIds];\r\n\r\n            if ( selectedMailIds.find(id => id === mailId) !== undefined )\r\n            {\r\n                selectedMailIds = selectedMailIds.filter(id => id !== mailId);\r\n            }\r\n            else\r\n            {\r\n                selectedMailIds = [...selectedMailIds, mailId];\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                selectedMailIds\r\n            };\r\n        }\r\n\r\n        case MailsActions.SELECT_ALL_MAILS:\r\n        {\r\n            const arr = Object.keys(state.entities).map(k => state.entities[k]);\r\n\r\n            const selectedMailIds = arr.map(mail => mail.id);\r\n\r\n            return {\r\n                ...state,\r\n                selectedMailIds\r\n            };\r\n        }\r\n\r\n        case MailsActions.DESELECT_ALL_MAILS:\r\n        {\r\n            return {\r\n                ...state,\r\n                selectedMailIds: []\r\n            };\r\n        }\r\n\r\n        case MailsActions.SELECT_MAILS_BY_PARAMETER:\r\n        {\r\n            const filter = action.payload;\r\n            const arr = Object.keys(state.entities).map(k => state.entities[k]);\r\n            const selectedMailIds = arr.filter(mail => mail[filter.parameter] === filter.value)\r\n                                       .map(mail => mail.id);\r\n            return {\r\n                ...state,\r\n                selectedMailIds\r\n            };\r\n        }\r\n\r\n        case MailsActions.SET_FOLDER_ON_SELECTED_MAILS:\r\n        {\r\n            const entities = {...state.entities};\r\n\r\n            state.selectedMailIds.map(id => {\r\n                entities[id] = {\r\n                    ...entities[id],\r\n                    folder: action.payload\r\n                };\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                entities\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { MailNgrxService } from '../../mail.service';\r\nimport { Mail } from '../../mail.model';\r\nimport * as fromStore from '../../store';\r\n\r\n@Component({\r\n    selector       : 'mail-ngrx-list-item',\r\n    templateUrl    : './mail-list-item.component.html',\r\n    styleUrls      : ['./mail-list-item.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation  : ViewEncapsulation.None\r\n})\r\nexport class MailNgrxListItemComponent implements OnInit\r\n{\r\n    @Input() mail: Mail;\r\n    @HostBinding('class.selected') selected: boolean;\r\n    @HostBinding('class.unread') unread: boolean;\r\n    labels$: Observable<any>;\r\n    selectedMailIds$: Observable<any>;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {ChangeDetectorRef} _changeDetectorRef\r\n     * @param {MailNgrxService} _mailNgrxService\r\n     * @param {Store} _store\r\n     */\r\n    constructor(\r\n        private _changeDetectorRef: ChangeDetectorRef,\r\n        private _mailNgrxService: MailNgrxService,\r\n        private _store: Store<fromStore.MailAppState>\r\n    )\r\n    {\r\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\r\n        this.selectedMailIds$ = this._store.pipe(select(fromStore.getSelectedMailIds));\r\n        this.selected = false;\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    ngOnInit(): void\r\n    {\r\n        // Set the initial values\r\n        this.mail = new Mail(this.mail);\r\n        this.unread = !this.mail.read;\r\n\r\n        this.selectedMailIds$.subscribe((selectedMailIds) => {\r\n            this.selected = selectedMailIds.length > 0 && selectedMailIds.find(id => id === this.mail.id) !== undefined;\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    refresh(): void\r\n    {\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    onSelectedChange(): void\r\n    {\r\n        this._store.dispatch(new fromStore.ToggleInSelectedMails(this.mail.id));\r\n    }\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n    <mat-checkbox [checked]=\"selected\" (change)=\"onSelectedChange()\"\r\n                  (click)=\"$event.stopPropagation();\">\r\n    </mat-checkbox>\r\n\r\n    <div class=\"info\" fxFlex FlexLayout=\"column\">\r\n\r\n        <div class=\"row-1\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n            <div class=\"name\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex>\r\n                <img class=\"avatar\" *ngIf=\"mail.from?.avatar\" alt=\"{{mail.from?.name}}\" src=\"{{mail.from?.avatar}}\"/>\r\n                <div class=\"avatar accent\" *ngIf=\"!mail.from?.avatar\">{{mail.from?.name[0]}}</div>\r\n                <span class=\"text-truncate\" *ngIf=\"mail?.from\">{{mail.from?.name}}</span>\r\n                <mat-icon class=\"s-16 ml-8\" *ngIf=\"mail.hasAttachments\">attachment</mat-icon>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                <div class=\"time\">{{mail.time}}</div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"row-2\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n            <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\r\n\r\n                <div class=\"subject text-truncate\">\r\n                    {{mail.subject}}\r\n                </div>\r\n\r\n                <div class=\"message text-truncate\" *ngIf=\"mail?.message\">\r\n                    {{mail.message | htmlToPlaintext | slice:0:180}}{{mail.message.length > 180 ? '...' : ''}}\r\n                </div>\r\n\r\n                <div class=\"labels\" fxLayout=\"row wrap\" fxHide fxShow.gt-sm>\r\n                    <div class=\"label\" *ngFor=\"let labelId of mail.labels\"\r\n                         fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                        <div class=\"label-color\"\r\n                             [ngStyle]=\"{'background-color': (labels$ | async) | getById:labelId:'color'}\"></div>\r\n                        <div class=\"label-title\">{{(labels$ | async) | getById:labelId:'title'}}</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Action } from '@ngrx/store';\r\n\r\nexport const GET_FOLDERS = '[FOLDERS] GET FOLDERS';\r\nexport const GET_FOLDERS_SUCCESS = '[FOLDERS] GET FOLDERS SUCCESS';\r\nexport const GET_FOLDERS_FAILED = '[FOLDERS] GET FOLDERS FAILED';\r\n\r\n/**\r\n * Get Folders\r\n */\r\nexport class GetFolders implements Action\r\n{\r\n    readonly type = GET_FOLDERS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Folders Success\r\n */\r\nexport class GetFoldersSuccess implements Action\r\n{\r\n    readonly type = GET_FOLDERS_SUCCESS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Folders Failed\r\n */\r\nexport class GetFoldersFailed implements Action\r\n{\r\n    readonly type = GET_FOLDERS_FAILED;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\nexport type FoldersActionsAll\r\n    = GetFolders\r\n    | GetFoldersSuccess\r\n    | GetFoldersFailed;\r\n","import { MailsEffect } from './mails.effects';\r\nimport { FoldersEffect } from './folders.effects';\r\nimport { FiltersEffect } from './filters.effects';\r\nimport { LabelsEffect } from './labels.effects';\r\n\r\nexport const effects = [\r\n    MailsEffect,\r\n    FoldersEffect,\r\n    FiltersEffect,\r\n    LabelsEffect\r\n];\r\n\r\nexport * from './mails.effects';\r\nexport * from './folders.effects';\r\nexport * from './filters.effects';\r\nexport * from './labels.effects';\r\n"],"sourceRoot":"webpack:///"}