{"version":3,"sources":["webpack:///src/app/main/apps/mail-ngrx/store/selectors/index.ts","webpack:///src/app/main/apps/mail-ngrx/store/reducers/filters.reducer.ts","webpack:///src/app/main/apps/mail-ngrx/store/selectors/mails.selectors.ts","webpack:///src/app/main/apps/mail-ngrx/store/effects/mails.effects.ts","webpack:///src/app/main/apps/mail-ngrx/store/reducers/labels.reducer.ts","webpack:///src/app/main/apps/mail-ngrx/store/effects/filters.effects.ts","webpack:///src/app/main/apps/mail-ngrx/store/actions/labels.actions.ts","webpack:///src/app/main/apps/mail-ngrx/store/selectors/labels.selectors.ts","webpack:///src/app/main/apps/mail-ngrx/i18n/en.ts","webpack:///src/app/main/apps/mail-ngrx/store/store.module.ts","webpack:///src/app/main/apps/mail-ngrx/dialogs/compose/compose.component.ts","webpack:///src/app/main/apps/mail-ngrx/dialogs/compose/compose.component.html","webpack:///src/app/main/apps/mail-ngrx/mail-details/mail-details.component.ts","webpack:///src/app/main/apps/mail-ngrx/mail-details/mail-details.component.html","webpack:///src/app/main/apps/mail-ngrx/store/actions/filters.actions.ts","webpack:///src/app/main/apps/mail-ngrx/mail.service.ts","webpack:///src/app/main/apps/mail-ngrx/store/effects/labels.effects.ts","webpack:///src/app/main/apps/mail-ngrx/store/effects/folders.effects.ts","webpack:///src/app/main/apps/mail-ngrx/mail.module.ts","webpack:///src/app/main/apps/mail-ngrx/store/selectors/filters.selectors.ts","webpack:///src/app/main/apps/mail-ngrx/store/reducers/index.ts","webpack:///src/app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component.ts","webpack:///src/app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component.html","webpack:///src/app/main/apps/mail-ngrx/store/selectors/folders.selectors.ts","webpack:///src/app/main/apps/mail-ngrx/store/actions/index.ts","webpack:///src/app/main/apps/mail-ngrx/store/guards/resolve.guard.ts","webpack:///src/app/main/apps/mail-ngrx/mail.component.ts","webpack:///src/app/main/apps/mail-ngrx/mail.component.html","webpack:///src/app/main/apps/mail-ngrx/store/guards/index.ts","webpack:///src/app/main/apps/mail-ngrx/store/reducers/folders.reducer.ts","webpack:///src/app/main/apps/mail-ngrx/store/index.ts","webpack:///src/app/main/apps/mail-ngrx/store/actions/mails.actions.ts","webpack:///src/app/main/apps/mail-ngrx/i18n/tr.ts","webpack:///src/app/main/apps/mail-ngrx/mail.model.ts","webpack:///src/app/main/apps/mail-ngrx/mail-list/mail-list.component.ts","webpack:///src/app/main/apps/mail-ngrx/mail-list/mail-list.component.html","webpack:///src/app/main/apps/mail-ngrx/store/reducers/mails.reducer.ts","webpack:///src/app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component.ts","webpack:///src/app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component.html","webpack:///src/app/main/apps/mail-ngrx/store/actions/folders.actions.ts","webpack:///src/app/main/apps/mail-ngrx/store/effects/index.ts"],"names":["FiltersInitialState","entities","loading","loaded","FiltersReducer","state","action","type","filters","payload","reduce","_entities","filter","id","getMailsState","mails","getMails","getMailsLoaded","getSearchText","searchText","getMailsArr","arr","Object","keys","map","filterArrayByString","getCurrentMail","currentMail","getSelectedMailIds","selectedMailIds","MailsEffect","actions","mailService","store","pipe","handle","value","routeParams","subscribe","param","routerState","params","err","updateMail","updateMails","mail","setCurrentMail","checkCurrentMail","mailId","getMailsSuccess","updateMailsSuccess","updateMailSuccess","setFolderOnSelectedMails","mailsToUpdate","folder","addLabelOnSelectedMails","labels","includes","LabelsInitialState","LabelsReducer","label","FiltersEffect","getFilters","GET_LABELS","GET_LABELS_SUCCESS","GET_LABELS_FAILED","GetLabels","GetLabelsSuccess","GetLabelsFailed","getLabelsState","getLabels","getLabelsLoaded","getLabelsArr","locale","lang","data","MAIL","COMPOSE","FOLDERS","FILTERS","LABELS","NO_MESSAGES","SELECT_A_MESSAGE_TO_READ","SEARCH_PLACEHOLDER","MailNgrxStoreModule","forFeature","imports","providers","MailNgrxComposeDialogComponent","matDialogRef","_data","_formBuilder","composeForm","createComposeForm","group","from","disabled","to","cc","bcc","subject","message","selector","templateUrl","styleUrls","encapsulation","None","$event","stopPropagation","MailNgrxDetailsComponent","_mailNgrxService","_store","labels$","showDetails","updateModel","markAsRead","read","markRead","event","toggleStar","toggleImportant","dispatch","changeDetection","OnPush","GET_FILTERS","GET_FILTERS_SUCCESS","GET_FILTERS_FAILED","GetFilters","GetFiltersSuccess","GetFiltersFailed","MailNgrxService","_httpClient","folders","foldersArr","filtersArr","labelsArr","selectedMails","get","labelId","find","folderId","post","LabelsEffect","FoldersEffect","getFolders","routes","path","component","canActivate","redirectTo","MailNgrxModule","forChild","declarations","entryComponents","getFiltersState","getFiltersLoaded","getFiltersArr","getMailAppState","getAppState","reducers","MailNgrxMainSidebarComponent","_matDialog","accounts","creapond","withinpixels","selectedAccount","folders$","filters$","dialogRef","open","panelClass","afterClosed","response","actionType","formData","console","log","getRawValue","composeDialog","getFoldersState","getFoldersLoaded","getFoldersArr","ResolveGuard","route","checkStore","foldersLoaded","filtersLoaded","labelsLoaded","MailNgrxComponent","_changeDetectorRef","_fuseSidebarService","_fuseTranslationLoaderService","searchInput","loadTranslations","currentMail$","mails$","selectedMailIds$","searchText$","hasSelectedMails","length","isIndeterminate","refresh","setValue","valueChanges","detach","ev","preventDefault","deselectAllMails","selectAllMails","parameter","markForCheck","name","getSidebar","toggleOpen","toggleSidebar","toggleSelectAll","selectMailsByParameter","FoldersInitialState","FoldersReducer","GET_MAILS","GET_MAILS_SUCCESS","GET_MAILS_FAILED","SET_CURRENT_MAIL","SET_CURRENT_MAIL_SUCCESS","CHECK_CURRENT_MAIL","UPDATE_MAIL","UPDATE_MAIL_SUCCESS","UPDATE_MAILS","UPDATE_MAILS_SUCCESS","SET_SEARCH_TEXT","SELECT_ALL_MAILS","DESELECT_ALL_MAILS","TOGGLE_IN_SELECTED_MAILS","SELECT_MAILS_BY_PARAMETER","SET_FOLDER_ON_SELECTED_MAILS","ADD_LABEL_ON_SELECTED_MAILS","GetMails","GetMailsSuccess","GetMailsFailed","SetCurrentMail","SetCurrentMailSuccess","CheckCurrentMail","UpdateMail","UpdateMailSuccess","UpdateMails","UpdateMailsSuccess","SetSearchText","SelectAllMails","DeselectAllMails","ToggleInSelectedMails","SelectMailsByParameter","SetFolderOnSelectedMails","AddLabelOnSelectedMails","Mail","time","starred","important","hasAttachments","attachments","MailNgrxListComponent","_activatedRoute","_router","labelHandle","snapshot","filterHandle","folderHandle","navigate","MailsInitialState","MailsReducer","undefined","k","MailNgrxListItemComponent","selected","unread","onSelectedChange","GET_FOLDERS","GET_FOLDERS_SUCCESS","GET_FOLDERS_FAILED","GetFolders","GetFoldersSuccess","GetFoldersFailed","effects"],"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","file":"mail-ngrx-mail-module-es5.js","sourcesContent":["export * from './mails.selectors';\r\nexport * from './folders.selectors';\r\nexport * from './filters.selectors';\r\nexport * from './labels.selectors';\r\n","import * as FiltersActions from 'app/main/apps/mail-ngrx/store/actions/filters.actions';\r\n\r\nexport interface FiltersState\r\n{\r\n    entities?: { [id: number]: any };\r\n    loading: boolean;\r\n    loaded: boolean;\r\n}\r\n\r\nexport const FiltersInitialState: FiltersState = {\r\n    entities: {},\r\n    loading : false,\r\n    loaded  : false\r\n};\r\n\r\nexport function FiltersReducer(state = FiltersInitialState, action: FiltersActions.FiltersActionsAll): FiltersState\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case FiltersActions.GET_FILTERS:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                loaded : false\r\n            };\r\n        case FiltersActions.GET_FILTERS_SUCCESS:\r\n\r\n            const filters = action.payload;\r\n            const entities = filters.reduce(\r\n                (_entities: { [id: number]: any }, filter: any) => {\r\n                    return {\r\n                        ..._entities,\r\n                        [filter.id]: filter\r\n                    };\r\n                }, {});\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : true,\r\n                entities\r\n            };\r\n\r\n        case FiltersActions.GET_FILTERS_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { FuseUtils } from '@fuse/utils';\r\n\r\nimport { createSelector } from '@ngrx/store';\r\nimport { getMailAppState, MailAppState, MailsState } from 'app/main/apps/mail-ngrx/store/reducers';\r\n\r\nexport const getMailsState = createSelector(\r\n    getMailAppState,\r\n    (state: MailAppState) => state.mails\r\n);\r\n\r\nexport const getMails = createSelector(\r\n    getMailsState,\r\n    (state: MailsState) => state.entities\r\n);\r\n\r\nexport const getMailsLoaded = createSelector(\r\n    getMailsState,\r\n    (state: MailsState) => state.loaded\r\n);\r\n\r\nexport const getSearchText = createSelector(\r\n    getMailsState,\r\n    (state: MailsState) => state.searchText\r\n);\r\n\r\nexport const getMailsArr = createSelector(\r\n    getMails,\r\n    getSearchText,\r\n    (entities, searchText) => {\r\n        const arr = Object.keys(entities).map((id) => entities[id]);\r\n        return FuseUtils.filterArrayByString(arr, searchText);\r\n    }\r\n);\r\n\r\nexport const getCurrentMail = createSelector(\r\n    getMailsState,\r\n    (state: MailsState) => state.currentMail\r\n);\r\n\r\nexport const getSelectedMailIds = createSelector(\r\n    getMailsState,\r\n    (state: MailsState) => state.selectedMailIds\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { Action, select, Store } from '@ngrx/store';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\n\r\nimport { Observable, of, forkJoin } from 'rxjs';\r\nimport { catchError, debounceTime, map, mergeMap, exhaustMap, withLatestFrom } from 'rxjs/operators';\r\n\r\nimport { getRouterState, State } from 'app/store/reducers';\r\nimport { getMailsState } from 'app/main/apps/mail-ngrx/store/selectors';\r\nimport * as MailsActions from 'app/main/apps/mail-ngrx/store/actions/mails.actions';\r\nimport * as fromRoot from 'app/store';\r\n\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Injectable()\r\nexport class MailsEffect\r\n{\r\n    routerState: any;\r\n\r\n    constructor(\r\n        private actions: Actions,\r\n        private mailService: MailNgrxService,\r\n        private store: Store<State>\r\n    )\r\n    {\r\n        this.store\r\n            .pipe(select(getRouterState))\r\n            .subscribe(routerState => {\r\n                if ( routerState )\r\n                {\r\n                    this.routerState = routerState.state;\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Get Mails with router parameters\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    getMails: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.GetMails>(MailsActions.GET_MAILS),\r\n                exhaustMap((action) => {\r\n\r\n                    let handle = {\r\n                        id   : '',\r\n                        value: ''\r\n                    };\r\n\r\n                    const routeParams = of('labelHandle', 'filterHandle', 'folderHandle');\r\n                    routeParams.subscribe(param => {\r\n                        if ( this.routerState.params[param] )\r\n                        {\r\n                            handle = {\r\n                                id   : param,\r\n                                value: this.routerState.params[param]\r\n                            };\r\n                        }\r\n                    });\r\n\r\n                    return this.mailService.getMails(handle)\r\n                               .pipe(\r\n                                   map((mails: Mail[]) => {\r\n\r\n                                       return new MailsActions.GetMailsSuccess({\r\n                                           loaded: handle,\r\n                                           mails : mails\r\n                                       });\r\n                                   }),\r\n                                   catchError(err => of(new MailsActions.GetMailsFailed(err)))\r\n                               );\r\n                })\r\n            );\r\n\r\n    /**\r\n     * Update Mail\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    updateMail: Observable<{}> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.UpdateMail>(MailsActions.UPDATE_MAIL),\r\n                exhaustMap((action) => {\r\n                    return this.mailService.updateMail(action.payload).pipe(\r\n                        map(() => {\r\n                            return new MailsActions.UpdateMailSuccess(action.payload);\r\n                        })\r\n                    );\r\n                })\r\n            );\r\n\r\n    /**\r\n     * UpdateMails\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    updateMails: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.UpdateMails>(MailsActions.UPDATE_MAILS),\r\n                exhaustMap((action) => {\r\n                    return forkJoin(action.payload.map(mail => this.mailService.updateMail(mail))).pipe(map(() => {\r\n                        return new MailsActions.UpdateMailsSuccess();\r\n                    }));\r\n                })\r\n            );\r\n\r\n    /**\r\n     * Set Current Mail\r\n     * @type {Observable<SetCurrentMailSuccess>}\r\n     */\r\n    @Effect()\r\n    setCurrentMail: Observable<Action> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.SetCurrentMail>(MailsActions.SET_CURRENT_MAIL),\r\n                withLatestFrom(this.store.pipe(select(getMailsState))),\r\n                map(([action, state]) => {\r\n                    return new MailsActions.SetCurrentMailSuccess(state.entities[action.payload]);\r\n                })\r\n            );\r\n\r\n    /**\r\n     * Check Current Mail\r\n     * Navigate to parent directory if not exist in mail list\r\n     * Update Current Mail if exist in mail list\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    checkCurrentMail: Observable<Action> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.CheckCurrentMail>(MailsActions.CHECK_CURRENT_MAIL),\r\n                withLatestFrom(this.store.pipe(select(getMailsState))),\r\n                map(([action, state]) => {\r\n\r\n                    if ( this.routerState.params.mailId && !state.entities[this.routerState.params.mailId] )\r\n                    {\r\n                        // return new fromRoot.Go({path: [this.routerState.url.replace(this.routerState.params.mailId, '')]});\r\n                    }\r\n\r\n                    return new MailsActions.SetCurrentMailSuccess(state.entities[this.routerState.params.mailId]);\r\n                })\r\n            );\r\n\r\n    /**\r\n     * On Get Mails Success\r\n     * @type {Observable<CheckCurrentMail>}\r\n     */\r\n    @Effect()\r\n    getMailsSuccess: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.GetMailsSuccess>(MailsActions.GET_MAILS_SUCCESS),\r\n                mergeMap(() =>\r\n                    [\r\n                        new MailsActions.CheckCurrentMail()\r\n                    ])\r\n            );\r\n    /**\r\n     * On Update Mails Success\r\n     * @type {Observable<DeselectAllMails | GetMails>}\r\n     */\r\n    @Effect()\r\n    updateMailsSuccess: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.UpdateMailsSuccess>(MailsActions.UPDATE_MAILS_SUCCESS),\r\n                mergeMap(() =>\r\n                    [\r\n                        new MailsActions.DeselectAllMails(),\r\n                        new MailsActions.GetMails()\r\n                    ])\r\n            );\r\n    /**\r\n     * On Update Mail Success\r\n     * @type {Observable<GetMails>}\r\n     */\r\n    @Effect()\r\n    updateMailSuccess: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.UpdateMailSuccess>(MailsActions.UPDATE_MAIL_SUCCESS),\r\n                debounceTime(500),\r\n                map(() => {\r\n                    return new MailsActions.GetMails();\r\n                })\r\n            );\r\n\r\n    /**\r\n     * Set Folder on Selected Mails\r\n     * @type {Observable<UpdateMails>}\r\n     */\r\n    @Effect()\r\n    setFolderOnSelectedMails: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.SetFolderOnSelectedMails>(MailsActions.SET_FOLDER_ON_SELECTED_MAILS),\r\n                withLatestFrom(\r\n                    this.store.pipe(select(getMailsState))),\r\n                map(([action, state]) => {\r\n                    const entities = {...state.entities};\r\n                    let mailsToUpdate = [];\r\n                    state.selectedMailIds\r\n                         .map(id => {\r\n                             mailsToUpdate = [\r\n                                 ...mailsToUpdate,\r\n                                 entities[id] = {\r\n                                     ...entities[id],\r\n                                     folder: action.payload\r\n                                 }\r\n                             ];\r\n                         });\r\n                    return new MailsActions.UpdateMails(mailsToUpdate);\r\n                })\r\n            );\r\n\r\n    /**\r\n     * Add Label on Selected Mails\r\n     * @type {Observable<UpdateMails>}\r\n     */\r\n    @Effect()\r\n    addLabelOnSelectedMails: Observable<MailsActions.MailsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<MailsActions.AddLabelOnSelectedMails>(MailsActions.ADD_LABEL_ON_SELECTED_MAILS),\r\n                withLatestFrom(this.store.pipe(select(getMailsState))),\r\n                map(([action, state]) => {\r\n\r\n                    const entities = {...state.entities};\r\n                    let mailsToUpdate = [];\r\n\r\n                    state.selectedMailIds\r\n                         .map(id => {\r\n\r\n                             let labels = [...entities[id].labels];\r\n\r\n                             if ( !entities[id].labels.includes(action.payload) )\r\n                             {\r\n                                 labels = [...labels, action.payload];\r\n                             }\r\n\r\n                             mailsToUpdate = [\r\n                                 ...mailsToUpdate,\r\n                                 entities[id] = {\r\n                                     ...entities[id],\r\n                                     labels\r\n                                 }\r\n                             ];\r\n                         });\r\n\r\n                    return new MailsActions.UpdateMails(mailsToUpdate);\r\n                })\r\n            );\r\n}\r\n","import * as LabelsActions from 'app/main/apps/mail-ngrx/store/actions/labels.actions';\r\n\r\nexport interface LabelsState\r\n{\r\n    entities?: { [id: number]: any };\r\n    loading: boolean;\r\n    loaded: boolean;\r\n}\r\n\r\nexport const LabelsInitialState: LabelsState = {\r\n    entities: {},\r\n    loading : false,\r\n    loaded  : false\r\n};\r\n\r\nexport function LabelsReducer(state = LabelsInitialState, action: LabelsActions.LabelsActionsAll): LabelsState\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case LabelsActions.GET_LABELS:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                loaded : false\r\n            };\r\n        case LabelsActions.GET_LABELS_SUCCESS:\r\n\r\n            const labels = action.payload;\r\n            const entities = labels.reduce(\r\n                (_entities: { [id: number]: any }, label: any) => {\r\n                    return {\r\n                        ..._entities,\r\n                        [label.id]: label\r\n                    };\r\n                }, {});\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : true,\r\n                entities\r\n            };\r\n\r\n        case LabelsActions.GET_LABELS_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\n\r\nimport * as FiltersActions from 'app/main/apps/mail-ngrx/store/actions/filters.actions';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Injectable()\r\nexport class FiltersEffect\r\n{\r\n    constructor(\r\n        private actions: Actions,\r\n        private mailService: MailNgrxService\r\n    )\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Get filters from Server\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    getFilters: Observable<FiltersActions.FiltersActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<FiltersActions.GetFilters>(FiltersActions.GET_FILTERS),\r\n                switchMap((action) => {\r\n                        return this.mailService.getFilters()\r\n                                   .pipe(\r\n                                       map((filters: any) => {\r\n                                           return new FiltersActions.GetFiltersSuccess(filters);\r\n                                       }),\r\n                                       catchError(err => of(new FiltersActions.GetFiltersFailed(err)))\r\n                                   );\r\n                    }\r\n                ));\r\n}\r\n","import { Action } from '@ngrx/store';\r\n\r\nexport const GET_LABELS = '[LABELS] GET LABELS';\r\nexport const GET_LABELS_SUCCESS = '[LABELS] GET LABELS SUCCESS';\r\nexport const GET_LABELS_FAILED = '[LABELS] GET LABELS FAILED';\r\n\r\n/**\r\n * Get Labels\r\n */\r\nexport class GetLabels implements Action\r\n{\r\n    readonly type = GET_LABELS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Labels Success\r\n */\r\nexport class GetLabelsSuccess implements Action\r\n{\r\n    readonly type = GET_LABELS_SUCCESS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Labels Failed\r\n */\r\nexport class GetLabelsFailed implements Action\r\n{\r\n    readonly type = GET_LABELS_FAILED;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\nexport type LabelsActionsAll\r\n    = GetLabels\r\n    | GetLabelsSuccess\r\n    | GetLabelsFailed;\r\n","import { createSelector } from '@ngrx/store';\r\nimport { LabelsState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\r\n\r\nexport const getLabelsState = createSelector(\r\n    getMailAppState,\r\n    (state: MailAppState) => state.labels\r\n);\r\n\r\nexport const getLabels = createSelector(\r\n    getLabelsState,\r\n    (state: LabelsState) => state.entities\r\n);\r\n\r\nexport const getLabelsLoaded = createSelector(\r\n    getLabelsState,\r\n    (state: LabelsState) => state.loaded\r\n);\r\n\r\nexport const getLabelsArr = createSelector(\r\n    getLabels,\r\n    (entities) => Object.keys(entities).map((id) => entities[id])\r\n);\r\n","export const locale = {\r\n    lang: 'en',\r\n    data: {\r\n        MAIL: {\r\n            COMPOSE                 : 'COMPOSE',\r\n            FOLDERS                 : 'FOLDERS',\r\n            FILTERS                 : 'FILTERS',\r\n            LABELS                  : 'LABELS',\r\n            NO_MESSAGES             : 'There are no messages!',\r\n            SELECT_A_MESSAGE_TO_READ: 'Select a message to read',\r\n            SEARCH_PLACEHOLDER: 'Search for an e-mail or contact'\r\n        }\r\n    }\r\n};\r\n","import { StoreModule } from '@ngrx/store';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\n\r\nimport { reducers } from 'app/main/apps/mail-ngrx/store/reducers';\r\nimport { effects } from 'app/main/apps/mail-ngrx/store/effects';\r\n\r\n@NgModule({\r\n    imports  : [\r\n        StoreModule.forFeature('mail-app', reducers),\r\n        EffectsModule.forFeature(effects)\r\n    ],\r\n    providers: []\r\n})\r\nexport class MailNgrxStoreModule\r\n{\r\n}\r\n","import { Component, Inject, ViewEncapsulation } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector     : 'mail-ngrx-compose',\r\n    templateUrl  : './compose.component.html',\r\n    styleUrls    : ['./compose.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MailNgrxComposeDialogComponent\r\n{\r\n    composeForm: FormGroup;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {MatDialogRef<MailNgrxComposeDialogComponent>} matDialogRef\r\n     * @param _data\r\n     * @param {FormBuilder} _formBuilder\r\n     */\r\n    constructor(\r\n        public matDialogRef: MatDialogRef<MailNgrxComposeDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) private _data: any,\r\n        private _formBuilder: FormBuilder\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.composeForm = this.createComposeForm();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Create compose form\r\n     *\r\n     * @returns {FormGroup}\r\n     */\r\n    createComposeForm(): FormGroup\r\n    {\r\n        return this._formBuilder.group({\r\n            from   : {\r\n                value   : ['johndoe@creapond.com'],\r\n                disabled: [true]\r\n            },\r\n            to     : [''],\r\n            cc     : [''],\r\n            bcc    : [''],\r\n            subject: [''],\r\n            message: ['']\r\n        });\r\n\r\n    }\r\n\r\n}\r\n","<div class=\"dialog-content-wrapper\">\r\n    <mat-toolbar class=\"mat-accent m-0\">\r\n        <mat-toolbar-row fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <span class=\"title dialog-title\">New Message</span>\r\n            <button mat-icon-button (click)=\"matDialogRef.close()\" aria-label=\"Close dialog\">\r\n                <mat-icon>close</mat-icon>\r\n            </button>\r\n        </mat-toolbar-row>\r\n    </mat-toolbar>\r\n\r\n    <div mat-dialog-content class=\"p-24 m-0\" fusePerfectScrollbar>\r\n\r\n        <form name=\"composeForm\" [formGroup]=\"composeForm\" class=\"compose-form\" fxLayout=\"column\" fxFlex>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>From</mat-label>\r\n                <input matInput name=\"from\"\r\n                       formControlName=\"from\"\r\n                       type=\"email\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>To</mat-label>\r\n                <input matInput name=\"to\"\r\n                       formControlName=\"to\"\r\n                       type=\"email\" required>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Cc</mat-label>\r\n                <input matInput\r\n                       name=\"cc\"\r\n                       formControlName=\"cc\"\r\n                       type=\"email\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Bcc</mat-label>\r\n                <input matInput\r\n                       name=\"bcc\"\r\n                       formControlName=\"bcc\"\r\n                       type=\"email\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Subject</mat-label>\r\n                <input matInput name=\"subject\"\r\n                       formControlName=\"subject\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Message</mat-label>\r\n                <textarea matInput name=\"message\"\r\n                          formControlName=\"message\"\r\n                          rows=\"6\">\r\n                </textarea>\r\n            </mat-form-field>\r\n\r\n            <div class=\"attachment-list\">\r\n\r\n                <div class=\"attachment\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                    <div>\r\n                        <span class=\"filename\">attachment-2.doc</span>\r\n                        <span class=\"size ml-4\">(12 Kb)</span>\r\n                    </div>\r\n\r\n                    <button mat-icon-button aria-label=\"Delete attachment\">\r\n                        <mat-icon class=\"s-16\">close</mat-icon>\r\n                    </button>\r\n                </div>\r\n\r\n                <div class=\"attachment\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                    <div>\r\n                        <span class=\"filename\">attachment-1.jpg</span>\r\n                        <span class=\"size ml-4\">(350 Kb)</span>\r\n                    </div>\r\n\r\n                    <button mat-icon-button aria-label=\"Delete attachment\">\r\n                        <mat-icon class=\"s-16\">close</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n\r\n    <div mat-dialog-actions class=\"m-0 p-16\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n        <div>\r\n            <button mat-raised-button\r\n                    color=\"accent\"\r\n                    (click)=\"matDialogRef.close(['send',composeForm])\"\r\n                    class=\"save-button\"\r\n                    [disabled]=\"composeForm.invalid\"\r\n                    aria-label=\"SAVE\">\r\n                SEND\r\n            </button>\r\n\r\n            <button mat-icon-button matTooltip=\"Attach a file\">\r\n                <mat-icon>attach_file</mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <button mat-icon-button (click)=\"matDialogRef.close(['delete',composeForm])\" aria-label=\"Delete\"\r\n                matTooltip=\"Delete\">\r\n            <mat-icon>delete</mat-icon>\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, ViewEncapsulation } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Component({\r\n    selector       : 'mail-ngrx-details',\r\n    templateUrl    : './mail-details.component.html',\r\n    styleUrls      : ['./mail-details.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation  : ViewEncapsulation.None\r\n})\r\nexport class MailNgrxDetailsComponent implements OnChanges\r\n{\r\n    @Input()\r\n    currentMail: Mail;\r\n\r\n    labels$: Observable<any>;\r\n    mail: Mail;\r\n    showDetails: boolean;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {MailNgrxService} _mailNgrxService\r\n     * @param {Store<MailAppState>} _store\r\n     */\r\n    constructor(\r\n        private _mailNgrxService: MailNgrxService,\r\n        private _store: Store<fromStore.MailAppState>\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\r\n        this.showDetails = false;\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On changes\r\n     */\r\n    ngOnChanges(): void\r\n    {\r\n        this.updateModel(this.currentMail);\r\n        this.markAsRead();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Mark as read\r\n     */\r\n    markAsRead(): void\r\n    {\r\n        if ( this.mail && !this.mail.read )\r\n        {\r\n            this.mail.markRead();\r\n            this.updateMail();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle star\r\n     *\r\n     * @param event\r\n     */\r\n    toggleStar(event): void\r\n    {\r\n        event.stopPropagation();\r\n        this.mail.toggleStar();\r\n        this.updateMail();\r\n    }\r\n\r\n    /**\r\n     * Toggle important\r\n     *\r\n     * @param event\r\n     */\r\n    toggleImportant(event): void\r\n    {\r\n        event.stopPropagation();\r\n        this.mail.toggleImportant();\r\n        this.updateMail();\r\n    }\r\n\r\n    /**\r\n     * Update model\r\n     *\r\n     * @param data\r\n     */\r\n    updateModel(data): void\r\n    {\r\n        this.mail = !data ? null : new Mail({...data});\r\n    }\r\n\r\n    /**\r\n     * Update the mail\r\n     */\r\n    updateMail(): void\r\n    {\r\n        this._store.dispatch(new fromStore.UpdateMail(this.mail));\r\n        this.updateModel(this.mail);\r\n    }\r\n}\r\n","<div *ngIf=\"!mail\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlex>\r\n    <mat-icon class=\"s-128 mb-16 select-message-icon hint-text\">\r\n        email\r\n    </mat-icon>\r\n    <span class=\"select-message-text hint-text\">\r\n        <span>{{ 'MAIL.SELECT_A_MESSAGE_TO_READ' | translate }}</span>\r\n    </span>\r\n</div>\r\n\r\n<div *ngIf=\"mail\">\r\n\r\n    <div class=\"mail-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n\r\n        <div>\r\n            <div class=\"subject\">{{mail.subject}}</div>\r\n\r\n            <div class=\"labels mt-8\" fxLayout=\"row wrap\">\r\n                <div class=\"label\" *ngFor=\"let labelId of mail.labels\"\r\n                     fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                    <div class=\"label-color\" [ngStyle]=\"{'background-color': (labels$ | async) | getById:labelId:'color'}\"></div>\r\n                    <div class=\"label-title\">{{(labels$ | async) | getById:labelId:'title'}}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"actions\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <button mat-icon-button (click)=\"toggleStar($event)\" aria-label=\"Toggle star\">\r\n                <mat-icon class=\"amber-fg\" *ngIf=\"mail.starred\">star</mat-icon>\r\n                <mat-icon class=\"secondary-text\" *ngIf=\"!mail.starred\">star_border</mat-icon>\r\n            </button>\r\n\r\n            <button mat-icon-button (click)=\"toggleImportant($event)\" aria-label=\"Toggle important\">\r\n                <mat-icon class=\"red-fg\" *ngIf=\"mail.important\">label</mat-icon>\r\n                <mat-icon class=\"secondary-text\" *ngIf=\"!mail.important\">label_outline</mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"mail-content\">\r\n\r\n        <div class=\"info\" fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n            <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"start start\">\r\n\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\r\n\r\n                    <div>\r\n                        <img *ngIf=\"mail.from.avatar\" alt=\"{{mail.from.name}}\"\r\n                             src=\"{{mail.from.avatar}}\" class=\"avatar\"/>\r\n\r\n                        <div *ngIf=\"!mail.from.avatar\" class=\"avatar\" ms-random-class=\"vm.colors\">\r\n                            {{mail.from.name[0]}}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\r\n\r\n                        <div class=\"name\">\r\n                            {{mail.from.name}}\r\n                        </div>\r\n\r\n                        <div class=\"to\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                            <div class=\"to-text\">to</div>\r\n                            <div>{{mail.to[0].name}}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <a class=\"toggle-details\" (click)=\"showDetails = !showDetails\">\r\n                    <span *ngIf=\"!showDetails\">Show Details</span>\r\n                    <span *ngIf=\"showDetails\">Hide Details</span>\r\n                </a>\r\n\r\n                <div *ngIf=\"showDetails\" class=\"details\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\r\n\r\n                    <div fxLayout=\"column\">\r\n                        <span class=\"title\">From:</span>\r\n                        <span class=\"title\">To:</span>\r\n                        <span class=\"title\">Date:</span>\r\n                    </div>\r\n\r\n                    <div fxLayout=\"column\">\r\n                        <span class=\"detail\">{{mail.from.email}}</span>\r\n                        <span class=\"detail\">{{mail.to[0].email}}</span>\r\n                        <span class=\"detail\">{{mail.time}}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <button mat-icon-button [matMenuTriggerFor]=\"moreMenu\" aria-label=\"More\" (click)=\"$event.stopPropagation()\">\r\n                <mat-icon>more_vert</mat-icon>\r\n            </button>\r\n\r\n            <mat-menu #moreMenu=\"matMenu\">\r\n                <button mat-menu-item aria-label=\"Reply\">\r\n                    <mat-icon>reply</mat-icon>\r\n                    <span>Reply</span>\r\n                </button>\r\n\r\n                <button mat-menu-item aria-label=\"Forward\">\r\n                    <mat-icon>forward</mat-icon>\r\n                    <span>Forward</span>\r\n                </button>\r\n\r\n                <button mat-menu-item aria-label=\"Print\">\r\n                    <mat-icon>print</mat-icon>\r\n                    <span>Print</span>\r\n                </button>\r\n            </mat-menu>\r\n        </div>\r\n\r\n        <div [innerHTML]=\"mail.message\"></div>\r\n\r\n    </div>\r\n\r\n    <div *ngIf=\"mail.attachments\" class=\"mail-attachments\">\r\n\r\n        <div class=\"title\">\r\n            <span>Attachments</span>\r\n            ({{mail.attachments.length}})\r\n        </div>\r\n\r\n        <div class=\"attachment-list\" fxLayout=\"row wrap\">\r\n\r\n            <div class=\"attachment\" fxLayout=\"column\"\r\n                 *ngFor=\"let attachment of mail.attachments\">\r\n\r\n                <img class=\"preview\" src=\"{{attachment.preview}}\">\r\n\r\n                <div fxLayout=\"column\">\r\n                    <a href=\"#\" onclick=\"event.preventDefault()\">View</a>\r\n                    <a href=\"#\" onclick=\"event.preventDefault()\">Download</a>\r\n                    <div class=\"size\">({{attachment.size}})</div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Action } from '@ngrx/store';\r\n\r\nexport const GET_FILTERS = '[FILTERS] GET FILTERS';\r\nexport const GET_FILTERS_SUCCESS = '[FILTERS] GET FILTERS SUCCESS';\r\nexport const GET_FILTERS_FAILED = '[FILTERS] GET FILTERS FAILED';\r\n\r\n/**\r\n * Get Filters\r\n */\r\nexport class GetFilters implements Action\r\n{\r\n    readonly type = GET_FILTERS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Filters Success\r\n */\r\nexport class GetFiltersSuccess implements Action\r\n{\r\n    readonly type = GET_FILTERS_SUCCESS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Filters Failed\r\n */\r\nexport class GetFiltersFailed implements Action\r\n{\r\n    readonly type = GET_FILTERS_FAILED;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\nexport type FiltersActionsAll\r\n    = GetFilters\r\n    | GetFiltersSuccess\r\n    | GetFiltersFailed;\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\nimport { MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\r\nimport { getFiltersArr, getFoldersArr, getLabelsArr, getMailsArr } from 'app/main/apps/mail-ngrx/store/selectors';\r\n\r\n@Injectable()\r\nexport class MailNgrxService\r\n{\r\n    foldersArr: any;\r\n    filtersArr: any;\r\n    labelsArr: any;\r\n    selectedMails: Mail[];\r\n    mails: Mail[];\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {HttpClient} _httpClient\r\n     * @param {Store<MailAppState>} _store\r\n     */\r\n    constructor(\r\n        private _httpClient: HttpClient,\r\n        private _store: Store<MailAppState>\r\n    )\r\n    {\r\n        this._store\r\n            .pipe(select(getFoldersArr))\r\n            .subscribe(folders => {\r\n                this.foldersArr = folders;\r\n            });\r\n\r\n        this._store\r\n            .pipe(select(getFiltersArr))\r\n            .subscribe(filters => {\r\n                this.filtersArr = filters;\r\n            });\r\n\r\n        this._store\r\n            .pipe(select(getLabelsArr))\r\n            .subscribe(labels => {\r\n                this.labelsArr = labels;\r\n            });\r\n\r\n        this._store\r\n            .pipe(select(getMailsArr))\r\n            .subscribe(mails => {\r\n                this.mails = mails;\r\n            });\r\n\r\n        this.selectedMails = [];\r\n    }\r\n\r\n    /**\r\n     * Get all mails\r\n     *\r\n     * @returns {Observable<Mail[]>}\r\n     */\r\n    getAllMails(): Observable<Mail[]>\r\n    {\r\n        return this._httpClient.get<Mail[]>('api/mail-mails');\r\n    }\r\n\r\n    /**\r\n     * Get folders\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getFolders(): Observable<any>\r\n    {\r\n        return this._httpClient.get('api/mail-folders');\r\n    }\r\n\r\n    /**\r\n     * Get filters\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getFilters(): Observable<any>\r\n    {\r\n        return this._httpClient.get('api/mail-filters');\r\n    }\r\n\r\n    /**\r\n     * Get labels\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getLabels(): Observable<any>\r\n    {\r\n        return this._httpClient.get('api/mail-labels');\r\n    }\r\n\r\n    /**\r\n     * Get mails\r\n     *\r\n     * @param handle\r\n     * @returns {Observable<Mail[]>}\r\n     */\r\n    getMails(handle): Observable<Mail[]>\r\n    {\r\n        if ( handle.id === 'labelHandle' )\r\n        {\r\n            const labelId = this.labelsArr.find(label => label.handle === handle.value).id;\r\n            return this._httpClient.get<Mail[]>('api/mail-mails?labels=' + labelId);\r\n        }\r\n        else if ( handle.id === 'filterHandle' )\r\n        {\r\n            return this._httpClient.get<Mail[]>('api/mail-mails?' + handle.value + '=true');\r\n        }\r\n        else // folderHandle\r\n        {\r\n            const folderId = this.foldersArr.find(folder => folder.handle === handle.value).id;\r\n            return this._httpClient.get<any>('api/mail-mails?folder=' + folderId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the mail\r\n     *\r\n     * @param mail\r\n     * @returns {Promise<any>}\r\n     */\r\n    updateMail(mail): any\r\n    {\r\n        return this._httpClient.post('api/mail-mails/' + mail.id, {...mail});\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\n\r\nimport * as LabelsActions from '../actions/labels.actions';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Injectable()\r\nexport class LabelsEffect\r\n{\r\n    constructor(\r\n        private actions: Actions,\r\n        private mailService: MailNgrxService\r\n    )\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Get Labels from Server\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    getLabels: Observable<LabelsActions.LabelsActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<LabelsActions.GetLabels>(LabelsActions.GET_LABELS),\r\n                switchMap((action) => {\r\n                        return this.mailService.getLabels()\r\n                                   .pipe(\r\n                                       map((labels: any) => {\r\n                                           return new LabelsActions.GetLabelsSuccess(labels);\r\n                                       }),\r\n                                       catchError(err => of(new LabelsActions.GetLabelsFailed(err)))\r\n                                   );\r\n                    }\r\n                ));\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\n\r\nimport * as FoldersActions from 'app/main/apps/mail-ngrx/store/actions/folders.actions';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Injectable()\r\nexport class FoldersEffect\r\n{\r\n    constructor(\r\n        private actions: Actions,\r\n        private mailService: MailNgrxService\r\n    )\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Get Folders from Server\r\n     * @type {Observable<any>}\r\n     */\r\n    @Effect()\r\n    getFolders: Observable<FoldersActions.FoldersActionsAll> =\r\n        this.actions\r\n            .pipe(\r\n                ofType<FoldersActions.GetFolders>(FoldersActions.GET_FOLDERS),\r\n                switchMap((action) => {\r\n                        return this.mailService.getFolders()\r\n                                   .pipe(\r\n                                       map((folders: any) => {\r\n                                           return new FoldersActions.GetFoldersSuccess(folders);\r\n                                       }),\r\n                                       catchError(err => of(new FoldersActions.GetFoldersFailed(err)))\r\n                                   );\r\n                    }\r\n                ));\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { FuseSharedModule } from '@fuse/shared.module';\r\nimport { FuseSidebarModule } from '@fuse/components';\r\n\r\nimport * as fromGuards from 'app/main/apps/mail-ngrx/store/guards/index';\r\nimport { MailNgrxStoreModule } from 'app/main/apps/mail-ngrx/store/store.module';\r\nimport { MailNgrxComponent } from 'app/main/apps/mail-ngrx/mail.component';\r\nimport { MailNgrxListComponent } from 'app/main/apps/mail-ngrx/mail-list/mail-list.component';\r\nimport { MailNgrxListItemComponent } from 'app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component';\r\nimport { MailNgrxDetailsComponent } from 'app/main/apps/mail-ngrx/mail-details/mail-details.component';\r\nimport { MailNgrxMainSidebarComponent } from 'app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component';\r\nimport { MailNgrxComposeDialogComponent } from 'app/main/apps/mail-ngrx/dialogs/compose/compose.component';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path       : 'label/:labelHandle',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path       : 'label/:labelHandle/:mailId',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path       : 'filter/:filterHandle',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path       : 'filter/:filterHandle/:mailId',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path       : ':folderHandle',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path       : ':folderHandle/:mailId',\r\n        component  : MailNgrxComponent,\r\n        canActivate: [fromGuards.ResolveGuard]\r\n    },\r\n    {\r\n        path      : '**',\r\n        redirectTo: 'inbox'\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    declarations   : [\r\n        MailNgrxComponent,\r\n        MailNgrxListComponent,\r\n        MailNgrxListItemComponent,\r\n        MailNgrxDetailsComponent,\r\n        MailNgrxMainSidebarComponent,\r\n        MailNgrxComposeDialogComponent\r\n    ],\r\n    imports        : [\r\n        RouterModule.forChild(routes),\r\n\r\n        MatButtonModule,\r\n        MatCheckboxModule,\r\n        MatDialogModule,\r\n        MatFormFieldModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatMenuModule,\r\n        MatRippleModule,\r\n        MatSelectModule,\r\n        MatToolbarModule,\r\n\r\n        TranslateModule,\r\n\r\n        FuseSharedModule,\r\n        FuseSidebarModule,\r\n\r\n        MailNgrxStoreModule\r\n    ],\r\n    providers      : [\r\n        MailNgrxService,\r\n        fromGuards.ResolveGuard\r\n    ],\r\n    entryComponents: [MailNgrxComposeDialogComponent]\r\n})\r\nexport class MailNgrxModule\r\n{\r\n}\r\n","import { createSelector } from '@ngrx/store';\r\nimport { FiltersState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\r\n\r\nexport const getFiltersState = createSelector(\r\n    getMailAppState,\r\n    (state: MailAppState) => state.filters\r\n);\r\n\r\nexport const getFilters = createSelector(\r\n    getFiltersState,\r\n    (state: FiltersState) => state.entities\r\n);\r\n\r\nexport const getFiltersLoaded = createSelector(\r\n    getFiltersState,\r\n    (state: FiltersState) => state.loaded\r\n);\r\n\r\nexport const getFiltersArr = createSelector(\r\n    getFilters,\r\n    (entities) => Object.keys(entities).map((id) => entities[id])\r\n);\r\n","import { ActionReducerMap, createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { MailsReducer, MailsState } from './mails.reducer';\r\nimport { FoldersReducer, FoldersState } from './folders.reducer';\r\nimport { FiltersReducer, FiltersState } from './filters.reducer';\r\nimport { LabelsReducer, LabelsState } from './labels.reducer';\r\n\r\nexport interface MailAppState\r\n{\r\n    mails: MailsState;\r\n    folders: FoldersState;\r\n    filters: FiltersState;\r\n    labels: LabelsState;\r\n}\r\n\r\nexport const getMailAppState = createFeatureSelector<MailAppState>(\r\n    'mail-app'\r\n);\r\n\r\nexport const getAppState = createSelector(\r\n    getMailAppState,\r\n    (state: MailAppState) => state\r\n);\r\n\r\nexport const reducers: ActionReducerMap<MailAppState> = {\r\n    mails  : MailsReducer,\r\n    folders: FoldersReducer,\r\n    filters: FiltersReducer,\r\n    labels : LabelsReducer\r\n};\r\n\r\nexport * from './mails.reducer';\r\nexport * from './folders.reducer';\r\nexport * from './filters.reducer';\r\nexport * from './labels.reducer';\r\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\r\nimport { MailNgrxComposeDialogComponent } from 'app/main/apps/mail-ngrx/dialogs/compose/compose.component';\r\n\r\n@Component({\r\n    selector       : 'mail-ngrx-main-sidebar',\r\n    templateUrl    : './main-sidebar.component.html',\r\n    styleUrls      : ['./main-sidebar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation  : ViewEncapsulation.None\r\n})\r\nexport class MailNgrxMainSidebarComponent\r\n{\r\n    labels: any[];\r\n    accounts: object;\r\n    selectedAccount: string;\r\n    dialogRef: any;\r\n\r\n    folders$: Observable<any>;\r\n    filters$: Observable<any>;\r\n    labels$: Observable<any>;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {MailNgrxService} _mailNgrxService\r\n     * @param {MatDialog} _matDialog\r\n     * @param {Store<MailAppState>} _store\r\n     */\r\n    constructor(\r\n        private _mailNgrxService: MailNgrxService,\r\n        private _matDialog: MatDialog,\r\n        private _store: Store<fromStore.MailAppState>\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.accounts = {\r\n            creapond    : 'johndoe@creapond.com',\r\n            withinpixels: 'johndoe@withinpixels.com'\r\n        };\r\n        this.selectedAccount = 'creapond';\r\n        this.folders$ = this._store.pipe(select(fromStore.getFoldersArr));\r\n        this.filters$ = this._store.pipe(select(fromStore.getFiltersArr));\r\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Compose dialog\r\n     */\r\n    composeDialog(): void\r\n    {\r\n        this.dialogRef = this._matDialog.open(MailNgrxComposeDialogComponent, {\r\n            panelClass: 'mail-ngrx-compose-dialog'\r\n        });\r\n\r\n        this.dialogRef.afterClosed()\r\n            .subscribe(response => {\r\n                if ( !response )\r\n                {\r\n                    return;\r\n                }\r\n                const actionType: string = response[0];\r\n                const formData: FormGroup = response[1];\r\n                switch ( actionType )\r\n                {\r\n                    /**\r\n                     * Send\r\n                     */\r\n                    case 'send':\r\n                        console.log('new Mail', formData.getRawValue());\r\n                        break;\r\n                    /**\r\n                     * Delete\r\n                     */\r\n                    case 'delete':\r\n                        console.log('delete Mail');\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n}\r\n","<!-- SIDEBAR HEADER -->\r\n<div fxLayout=\"column\" fxLayoutAlign=\"space-between start\"\r\n     class=\"header accent p-24 pb-4\">\r\n\r\n    <div class=\"logo\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <mat-icon class=\"logo-icon s-32\">mail</mat-icon>\r\n        <span class=\"logo-text\">MailboxNgrx</span>\r\n    </div>\r\n\r\n    <div class=\"account\" fxLayout=\"column\">\r\n        <div class=\"title\">John Doe</div>\r\n        <mat-form-field floatLabel=\"never\">\r\n            <mat-select class=\"account-selection\" placeholder=\"Mail Selection\"\r\n                        [ngModel]=\"selectedAccount\">\r\n                <mat-option *ngFor=\"let account of (accounts | keys)\" [value]=\"account.key\">\r\n                    {{account.value}}\r\n                </mat-option>\r\n            </mat-select>\r\n        </mat-form-field>\r\n    </div>\r\n\r\n</div>\r\n<!-- / SIDEBAR HEADER -->\r\n\r\n<!-- SIDEBAR CONTENT -->\r\n<div class=\"content\" fusePerfectScrollbar>\r\n\r\n    <div class=\"px-24 pt-32 pb-12\">\r\n        <button mat-raised-button\r\n                class=\"mat-accent compose-dialog-button w-100-p\"\r\n                (click)=\"composeDialog()\"\r\n                aria-label=\"Compose\">\r\n            {{ 'MAIL.COMPOSE' | translate }}\r\n        </button>\r\n    </div>\r\n\r\n    <div class=\"nav material2\">\r\n\r\n        <div class=\"nav-subheader\">{{ 'MAIL.FOLDERS' | translate }}</div>\r\n\r\n        <div class=\"nav-item\" *ngFor=\"let folder of (folders$ | async)\">\r\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/' + folder.handle\"\r\n               [routerLinkActive]=\"['active', 'accent']\">\r\n                <mat-icon class=\"nav-link-icon\" *ngIf=\"folder.icon\">{{folder.icon}}</mat-icon>\r\n                <span>{{folder.title}}</span>\r\n            </a>\r\n        </div>\r\n\r\n        <div class=\"nav-subheader\">{{ 'MAIL.FILTERS' | translate }}</div>\r\n\r\n        <div class=\"nav-item\" *ngFor=\"let filter of (filters$ | async)\">\r\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/filter/' + filter.handle\"\r\n               [routerLinkActive]=\"['active', 'accent']\">\r\n                <mat-icon class=\"nav-link-icon\" [ngClass]=\"filter.color\" *ngIf=\"filter.icon\">{{filter.icon}}</mat-icon>\r\n                <span>{{filter.title}}</span>\r\n            </a>\r\n        </div>\r\n\r\n        <div class=\"nav-subheader\">{{ 'MAIL.LABELS' | translate }}</div>\r\n\r\n        <div class=\"nav-item\" *ngFor=\"let label of (labels$ | async)\">\r\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/label/' + label.handle\"\r\n               [routerLinkActive]=\"['active', 'accent']\">\r\n                <mat-icon class=\"nav-link-icon\" [ngStyle]=\"{'color':label.color}\">label</mat-icon>\r\n                <span>{{label.title}}</span>\r\n            </a>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n<!-- / SIDEBAR CONTENT -->\r\n","import { createSelector } from '@ngrx/store';\r\nimport { FoldersState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\r\n\r\nexport const getFoldersState = createSelector(\r\n    getMailAppState,\r\n    (state: MailAppState) => state.folders\r\n);\r\n\r\nexport const getFolders = createSelector(\r\n    getFoldersState,\r\n    (state: FoldersState) => state.entities\r\n);\r\n\r\nexport const getFoldersLoaded = createSelector(\r\n    getFoldersState,\r\n    (state: FoldersState) => state.loaded\r\n);\r\n\r\nexport const getFoldersArr = createSelector(\r\n    getFolders,\r\n    (entities) => Object.keys(entities).map((id) => entities[id])\r\n);\r\n","export * from './mails.actions';\r\nexport * from './folders.actions';\r\nexport * from './filters.actions';\r\nexport * from './labels.actions';\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\r\nimport { RouterStateSnapshot } from '@angular/router';\r\nimport { select, Store } from '@ngrx/store';\r\n\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport { map, switchMap, catchError, tap, take, filter } from 'rxjs/operators';\r\n\r\nimport { MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\r\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\r\nimport { getFiltersLoaded, getFoldersLoaded, getLabelsLoaded, getMailsLoaded } from 'app/main/apps/mail-ngrx/store/selectors';\r\nimport { getRouterState } from 'app/store/reducers';\r\n\r\n@Injectable()\r\nexport class ResolveGuard implements CanActivate\r\n{\r\n    routerState: any;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {Store<MailAppState>} _store\r\n     */\r\n    constructor(\r\n        private _store: Store<MailAppState>\r\n    )\r\n    {\r\n        this._store\r\n            .pipe(select(getRouterState))\r\n            .subscribe(routerState => {\r\n                if ( routerState )\r\n                {\r\n                    this.routerState = routerState.state;\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Can activate\r\n     *\r\n     * @param {ActivatedRouteSnapshot} route\r\n     * @param {RouterStateSnapshot} state\r\n     * @returns {Observable<boolean>}\r\n     */\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean>\r\n    {\r\n        return this.checkStore().pipe(\r\n            switchMap(() => of(true)),\r\n            catchError(() => of(false))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Check store\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    checkStore(): Observable<any>\r\n    {\r\n        return forkJoin(\r\n            this.getFolders(),\r\n            this.getFilters(),\r\n            this.getLabels()\r\n        ).pipe(\r\n            filter(([foldersLoaded, filtersLoaded, labelsLoaded]) => !!(foldersLoaded && filtersLoaded && labelsLoaded)),\r\n            take(1),\r\n            switchMap(() =>\r\n                this.getMails()\r\n            ),\r\n            take(1),\r\n            map(() => this._store.dispatch(new fromStore.SetCurrentMail(this.routerState.params.mailId)))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get folders\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getFolders(): any\r\n    {\r\n        return this._store.pipe(\r\n            select(getFoldersLoaded),\r\n            tap(loaded => {\r\n                if ( !loaded )\r\n                {\r\n                    this._store.dispatch(new fromStore.GetFolders([]));\r\n                }\r\n            }),\r\n            filter(loaded => loaded),\r\n            take(1)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get Filters\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getFilters(): any\r\n    {\r\n        return this._store.pipe(\r\n            select(getFiltersLoaded),\r\n            tap(loaded => {\r\n                if ( !loaded )\r\n                {\r\n                    this._store.dispatch(new fromStore.GetFilters([]));\r\n                }\r\n            }),\r\n            filter(loaded => loaded),\r\n            take(1)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get Labels\r\n     * @returns {Observable<any>}\r\n     */\r\n    getLabels(): any\r\n    {\r\n        return this._store.pipe(\r\n            select(getLabelsLoaded),\r\n            tap(loaded => {\r\n                if ( !loaded )\r\n                {\r\n                    this._store.dispatch(new fromStore.GetLabels([]));\r\n                }\r\n            }),\r\n            filter(loaded => loaded),\r\n            take(1)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get Mails\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getMails(): any\r\n    {\r\n        return this._store.pipe(\r\n            select(getMailsLoaded),\r\n            tap((loaded: any) => {\r\n\r\n                if ( !this.routerState.params[loaded.id] || this.routerState.params[loaded.id] !== loaded.value )\r\n                {\r\n                    this._store.dispatch(new fromStore.GetMails());\r\n                    this._store.dispatch(new fromStore.SetSearchText(''));\r\n                    this._store.dispatch(new fromStore.DeselectAllMails());\r\n                }\r\n            }),\r\n            filter((loaded: any) => {\r\n                return this.routerState.params[loaded.id] && this.routerState.params[loaded.id] === loaded.value;\r\n            }),\r\n            take(1)\r\n        );\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport { FuseSidebarService } from '@fuse/components/sidebar/sidebar.service';\r\nimport { FuseTranslationLoaderService } from '@fuse/services/translation-loader.service';\r\n\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\r\n\r\nimport { locale as english } from 'app/main/apps/mail-ngrx/i18n/en';\r\nimport { locale as turkish } from 'app/main/apps/mail-ngrx/i18n/tr';\r\n\r\n@Component({\r\n    selector       : 'mail-ngrx',\r\n    templateUrl    : './mail.component.html',\r\n    styleUrls      : ['./mail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation  : ViewEncapsulation.None\r\n})\r\nexport class MailNgrxComponent implements OnInit, OnDestroy\r\n{\r\n    hasSelectedMails: boolean;\r\n    isIndeterminate: boolean;\r\n    searchInput: FormControl;\r\n    mails$: Observable<any>;\r\n    folders$: Observable<any>;\r\n    labels$: Observable<any>;\r\n    currentMail$: Observable<Mail>;\r\n    selectedMailIds$: Observable<string[]>;\r\n    searchText$: Observable<string>;\r\n    mails: Mail[];\r\n    selectedMailIds: string[];\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {ChangeDetectorRef} _changeDetectorRef\r\n     * @param {FuseSidebarService} _fuseSidebarService\r\n     * @param {FuseTranslationLoaderService} _fuseTranslationLoaderService\r\n     * @param {MailNgrxService} _mailNgrxService\r\n     * @param {Store<MailAppState>} _store\r\n     */\r\n    constructor(\r\n        private _changeDetectorRef: ChangeDetectorRef,\r\n        private _fuseSidebarService: FuseSidebarService,\r\n        private _fuseTranslationLoaderService: FuseTranslationLoaderService,\r\n        private _mailNgrxService: MailNgrxService,\r\n        private _store: Store<fromStore.MailAppState>\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.searchInput = new FormControl('');\r\n        this._fuseTranslationLoaderService.loadTranslations(english, turkish);\r\n        this.currentMail$ = this._store.pipe(select(fromStore.getCurrentMail));\r\n        this.mails$ = this._store.pipe(select(fromStore.getMailsArr));\r\n        this.folders$ = this._store.pipe(select(fromStore.getFoldersArr));\r\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\r\n        this.selectedMailIds$ = this._store.pipe(select(fromStore.getSelectedMailIds));\r\n        this.searchText$ = this._store.pipe(select(fromStore.getSearchText));\r\n        this.mails = [];\r\n        this.selectedMailIds = [];\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        this.mails$.subscribe(mails => {\r\n            this.mails = mails;\r\n        });\r\n\r\n        this.selectedMailIds$\r\n            .subscribe(selectedMailIds => {\r\n                this.selectedMailIds = selectedMailIds;\r\n                this.hasSelectedMails = selectedMailIds.length > 0;\r\n                this.isIndeterminate = (selectedMailIds.length !== this.mails.length && selectedMailIds.length > 0);\r\n                this.refresh();\r\n            });\r\n\r\n        this.searchText$.subscribe(searchText => {\r\n            this.searchInput.setValue(searchText);\r\n        });\r\n\r\n        this.searchInput.valueChanges.pipe(\r\n            debounceTime(300),\r\n            distinctUntilChanged()\r\n        ).subscribe(searchText => {\r\n            this._store.dispatch(new fromStore.SetSearchText(searchText));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n        this._changeDetectorRef.detach();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Toggle select all\r\n     *\r\n     * @param ev\r\n     */\r\n    toggleSelectAll(ev): void\r\n    {\r\n        ev.preventDefault();\r\n\r\n        if ( this.selectedMailIds.length && this.selectedMailIds.length > 0 )\r\n        {\r\n            this.deselectAllMails();\r\n        }\r\n        else\r\n        {\r\n            this.selectAllMails();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select all mails\r\n     */\r\n    selectAllMails(): void\r\n    {\r\n        this._store.dispatch(new fromStore.SelectAllMails());\r\n    }\r\n\r\n    /**\r\n     * Deselect all mails\r\n     */\r\n    deselectAllMails(): void\r\n    {\r\n        this._store.dispatch(new fromStore.DeselectAllMails());\r\n    }\r\n\r\n    /**\r\n     * Select mails by parameter\r\n     *\r\n     * @param parameter\r\n     * @param value\r\n     */\r\n    selectMailsByParameter(parameter, value): void\r\n    {\r\n        this._store.dispatch(new fromStore.SelectMailsByParameter({\r\n            parameter,\r\n            value\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Toggle label on selected mails\r\n     *\r\n     * @param labelId\r\n     */\r\n    toggleLabelOnSelectedMails(labelId): void\r\n    {\r\n        this._store.dispatch(new fromStore.AddLabelOnSelectedMails(labelId));\r\n    }\r\n\r\n    /**\r\n     * Set folder on selected mails\r\n     *\r\n     * @param folderId\r\n     */\r\n    setFolderOnSelectedMails(folderId): void\r\n    {\r\n        this._store.dispatch(new fromStore.SetFolderOnSelectedMails(folderId));\r\n    }\r\n\r\n    /**\r\n     * Deselect current mail\r\n     */\r\n    deselectCurrentMail(): void\r\n    {\r\n        this._store.dispatch(new fromStore.SetCurrentMail(''));\r\n    }\r\n\r\n    /**\r\n     * Refresh\r\n     */\r\n    refresh(): void\r\n    {\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    /**\r\n     * Toggle the sidebar\r\n     *\r\n     * @param name\r\n     */\r\n    toggleSidebar(name): void\r\n    {\r\n        this._fuseSidebarService.getSidebar(name).toggleOpen();\r\n    }\r\n}\r\n","<div id=\"mail\" class=\"page-layout carded left-sidebar inner-scroll\">\r\n\r\n    <!-- TOP BACKGROUND -->\r\n    <div class=\"top-bg accent\"></div>\r\n    <!-- / TOP BACKGROUND -->\r\n\r\n    <!-- SIDEBAR -->\r\n    <fuse-sidebar class=\"sidebar\" name=\"mail-ngrx-main-sidebar\" position=\"left\" lockedOpen=\"gt-md\">\r\n        <mail-ngrx-main-sidebar></mail-ngrx-main-sidebar>\r\n    </fuse-sidebar>\r\n    <!-- / SIDEBAR -->\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\">\r\n\r\n        <!-- CONTENT HEADER -->\r\n        <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n            <div class=\"search-wrapper\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n                <button mat-icon-button class=\"sidebar-toggle\" fxHide.gt-md\r\n                        (click)=\"toggleSidebar('mail-ngrx-main-sidebar')\">\r\n                    <mat-icon>menu</mat-icon>\r\n                </button>\r\n\r\n                <div class=\"search\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                    <mat-icon class=\"secondary-text\">search</mat-icon>\r\n                    <input [formControl]=\"searchInput\" [placeholder]=\"'MAIL.SEARCH_PLACEHOLDER' | translate\" fxFlex>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- / CONTENT HEADER -->\r\n\r\n        <!-- CONTENT CARD -->\r\n        <div class=\"content-card\" [ngClass]=\"{'current-mail-selected':currentMail$ | async}\">\r\n\r\n            <!-- CONTENT TOOLBAR -->\r\n            <div class=\"toolbar px-24 py-8\">\r\n\r\n                <div class=\"mail-selection\" fxFlex=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n                    <mat-checkbox (click)=\"toggleSelectAll($event)\"\r\n                                  [checked]=\"hasSelectedMails\"\r\n                                  [indeterminate]=\"isIndeterminate\">\r\n                    </mat-checkbox>\r\n\r\n                    <button mat-icon-button [matMenuTriggerFor]=\"selectMenu\">\r\n                        <mat-icon>arrow_drop_down</mat-icon>\r\n                    </button>\r\n                    <mat-menu #selectMenu=\"matMenu\">\r\n                        <button mat-menu-item (click)=\"selectAllMails()\">All</button>\r\n                        <button mat-menu-item (click)=\"deselectAllMails()\">None</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('read', true)\">Read</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('read', false)\">Unread</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('starred', true)\">Starred</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('starred', false)\">Unstarred</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('important', true)\">Important</button>\r\n                        <button mat-menu-item (click)=\"selectMailsByParameter('important', false)\">Unimportant</button>\r\n                    </mat-menu>\r\n\r\n                    <div class=\"toolbar-separator\" *ngIf=\"hasSelectedMails\"></div>\r\n\r\n                    <button mat-icon-button (click)=\"setFolderOnSelectedMails(4)\" *ngIf=\"hasSelectedMails\">\r\n                        <mat-icon class=\"secondary-text\">delete</mat-icon>\r\n                    </button>\r\n\r\n                    <button mat-icon-button [matMenuTriggerFor]=\"folderMenu\" *ngIf=\"hasSelectedMails\">\r\n                        <mat-icon class=\"secondary-text\">folder</mat-icon>\r\n                    </button>\r\n                    <mat-menu #folderMenu=\"matMenu\">\r\n                        <button mat-menu-item *ngFor=\"let folder of folders$ | async\"\r\n                                (click)=\"setFolderOnSelectedMails(folder.id)\">{{folder.title}}\r\n                        </button>\r\n                    </mat-menu>\r\n\r\n                    <button mat-icon-button [matMenuTriggerFor]=\"labelMenu\" *ngIf=\"hasSelectedMails\">\r\n                        <mat-icon class=\"secondary-text\">label</mat-icon>\r\n                    </button>\r\n                    <mat-menu #labelMenu=\"matMenu\">\r\n                        <button mat-menu-item *ngFor=\"let label of labels$ | async\"\r\n                                (click)=\"toggleLabelOnSelectedMails(label.id)\">{{label.title}}\r\n                        </button>\r\n                    </mat-menu>\r\n                </div>\r\n\r\n                <div *ngIf=\"currentMail$ | async\" fxHide.gt-xs>\r\n                    <button mat-icon-button (click)=\"deselectCurrentMail()\">\r\n                        <mat-icon class=\"secondary-text\">arrow_back</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <!-- / CONTENT TOOLBAR -->\r\n\r\n            <!-- CONTENT -->\r\n            <div class=\"content\" fxLayout=\"row\">\r\n\r\n                <mail-ngrx-list fusePerfectScrollbar fxFlex [mails]=\"mails$ | async\" [currentMail]=\"currentMail$ | async\"></mail-ngrx-list>\r\n                <mail-ngrx-details [currentMail]=\"currentMail$ | async\" fusePerfectScrollbar fxFlex></mail-ngrx-details>\r\n\r\n            </div>\r\n            <!-- / CONTENT -->\r\n\r\n        </div>\r\n        <!-- / CONTENT CARD -->\r\n\r\n    </div>\r\n    <!-- / CENTER -->\r\n\r\n</div>\r\n","export * from './resolve.guard';\r\n","import * as FoldersActions from 'app/main/apps/mail-ngrx/store/actions/folders.actions';\r\n\r\nexport interface FoldersState\r\n{\r\n    entities?: { [id: number]: any };\r\n    loading: boolean;\r\n    loaded: boolean;\r\n}\r\n\r\nexport const FoldersInitialState: FoldersState = {\r\n    entities: {},\r\n    loading : false,\r\n    loaded  : false\r\n};\r\n\r\nexport function FoldersReducer(state = FoldersInitialState, action: FoldersActions.FoldersActionsAll): FoldersState\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case FoldersActions.GET_FOLDERS:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                loaded : false\r\n            };\r\n        case FoldersActions.GET_FOLDERS_SUCCESS:\r\n\r\n            const folders = action.payload;\r\n            const entities = folders.reduce(\r\n                (_entities: { [id: number]: any }, folder: any) => {\r\n                    return {\r\n                        ..._entities,\r\n                        [folder.id]: folder\r\n                    };\r\n                }, {});\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : true,\r\n                entities\r\n            };\r\n\r\n        case FoldersActions.GET_FOLDERS_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export * from './actions';\r\nexport * from './reducers';\r\nexport * from './selectors';\r\nexport * from './effects';\r\n","import { Action } from '@ngrx/store';\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\n\r\nexport const GET_MAILS = '[MAILS] GET MAILS';\r\nexport const GET_MAILS_SUCCESS = '[MAILS] GET MAILS SUCCESS';\r\nexport const GET_MAILS_FAILED = '[MAILS] GET MAILS FAILED';\r\nexport const SET_CURRENT_MAIL = '[MAILS] SET CURRENT MAIL';\r\nexport const SET_CURRENT_MAIL_SUCCESS = '[MAILS] SET CURRENT MAIL SUCCESS';\r\nexport const CHECK_CURRENT_MAIL = '[MAILS] CHECK CURRENT MAIL';\r\nexport const UPDATE_MAIL = '[MAILS] UPDATE MAIL';\r\nexport const UPDATE_MAIL_SUCCESS = '[MAILS] UPDATE MAIL SUCCESS';\r\nexport const UPDATE_MAILS = '[MAILS] UPDATE MAILS';\r\nexport const UPDATE_MAILS_SUCCESS = '[MAILS] UPDATE MAILS SUCCESS';\r\nexport const SET_SEARCH_TEXT = '[MAILS] SET SEARCH TEXT';\r\nexport const SELECT_ALL_MAILS = '[MAILS] SELECT ALL MAILS';\r\nexport const DESELECT_ALL_MAILS = '[MAILS] DESELECT ALL MAILS';\r\nexport const TOGGLE_IN_SELECTED_MAILS = '[MAILS] TOGGLE IN SELECTED MAILS';\r\nexport const SELECT_MAILS_BY_PARAMETER = '[MAILS] SELECT MAILS BY PARAMETER';\r\nexport const SET_FOLDER_ON_SELECTED_MAILS = '[MAILS] SET FOLDER ON SELECTED MAILS';\r\nexport const ADD_LABEL_ON_SELECTED_MAILS = '[MAILS] ADD LABEL ON SELECTED MAILS';\r\n\r\n/**\r\n * Get Mails\r\n */\r\nexport class GetMails implements Action\r\n{\r\n    readonly type = GET_MAILS;\r\n\r\n    constructor()\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Mails Success\r\n */\r\nexport class GetMailsSuccess implements Action\r\n{\r\n    readonly type = GET_MAILS_SUCCESS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Mails Failed\r\n */\r\nexport class GetMailsFailed implements Action\r\n{\r\n    readonly type = GET_MAILS_FAILED;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Set Current Mail\r\n */\r\nexport class SetCurrentMail implements Action\r\n{\r\n    readonly type = SET_CURRENT_MAIL;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Set Current Mail Success\r\n */\r\nexport class SetCurrentMailSuccess implements Action\r\n{\r\n    readonly type = SET_CURRENT_MAIL_SUCCESS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Check Current Mail\r\n */\r\nexport class CheckCurrentMail implements Action\r\n{\r\n    readonly type = CHECK_CURRENT_MAIL;\r\n\r\n    constructor()\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Update Mail\r\n */\r\nexport class UpdateMail implements Action\r\n{\r\n    readonly type = UPDATE_MAIL;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Update Mail Success\r\n */\r\nexport class UpdateMailSuccess implements Action\r\n{\r\n    readonly type = UPDATE_MAIL_SUCCESS;\r\n\r\n    constructor(public payload: Mail)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Update Mails\r\n */\r\nexport class UpdateMails implements Action\r\n{\r\n    readonly type = UPDATE_MAILS;\r\n\r\n    constructor(public payload: Mail[])\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Update Mails Success\r\n */\r\nexport class UpdateMailsSuccess implements Action\r\n{\r\n    readonly type = UPDATE_MAILS_SUCCESS;\r\n\r\n    constructor()\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Set Search Text\r\n */\r\nexport class SetSearchText implements Action\r\n{\r\n    readonly type = SET_SEARCH_TEXT;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Select All Mails\r\n */\r\nexport class SelectAllMails implements Action\r\n{\r\n    readonly type = SELECT_ALL_MAILS;\r\n\r\n    constructor()\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Deselect All Mails\r\n */\r\nexport class DeselectAllMails implements Action\r\n{\r\n    readonly type = DESELECT_ALL_MAILS;\r\n\r\n    constructor()\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Toggle In Selected Mails\r\n */\r\nexport class ToggleInSelectedMails implements Action\r\n{\r\n    readonly type = TOGGLE_IN_SELECTED_MAILS;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Select Mails by Parameter\r\n */\r\nexport class SelectMailsByParameter implements Action\r\n{\r\n    readonly type = SELECT_MAILS_BY_PARAMETER;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Set Folder on Selected Mails\r\n */\r\nexport class SetFolderOnSelectedMails implements Action\r\n{\r\n    readonly type = SET_FOLDER_ON_SELECTED_MAILS;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Add label on Selected Mails\r\n */\r\nexport class AddLabelOnSelectedMails implements Action\r\n{\r\n    readonly type = ADD_LABEL_ON_SELECTED_MAILS;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\nexport type MailsActionsAll\r\n    = GetMails\r\n    | GetMailsSuccess\r\n    | GetMailsFailed\r\n    | SetCurrentMail\r\n    | SetCurrentMailSuccess\r\n    | CheckCurrentMail\r\n    | UpdateMail\r\n    | UpdateMailSuccess\r\n    | UpdateMails\r\n    | UpdateMailsSuccess\r\n    | SetSearchText\r\n    | SelectAllMails\r\n    | DeselectAllMails\r\n    | ToggleInSelectedMails\r\n    | SelectMailsByParameter\r\n    | SetFolderOnSelectedMails\r\n    | AddLabelOnSelectedMails;\r\n","export const locale = {\r\n    lang: 'tr',\r\n    data: {\r\n        MAIL: {\r\n            COMPOSE                 : 'YENİ E-POSTA',\r\n            FOLDERS                 : 'KLASÖRLER',\r\n            FILTERS                 : 'FİLTRELER',\r\n            LABELS                  : 'ETİKETLER',\r\n            NO_MESSAGES             : 'Mesajiniz bulunmamakta!',\r\n            SELECT_A_MESSAGE_TO_READ: 'Okumak için bir mesaj seçin',\r\n            SEARCH_PLACEHOLDER      : 'E-mail yada bir kişi arayın'\r\n        }\r\n    }\r\n};\r\n","export class Mail\r\n{\r\n    id: string;\r\n    from: {\r\n        name: string,\r\n        avatar: string,\r\n        email: string\r\n    };\r\n    to: {\r\n        name: string,\r\n        email: string\r\n    }[];\r\n    subject: string;\r\n    message: string;\r\n    time: string;\r\n    read: boolean;\r\n    starred: boolean;\r\n    important: boolean;\r\n    hasAttachments: boolean;\r\n    attachments: {\r\n        type: string,\r\n        fileName: string,\r\n        preview: string,\r\n        url: string,\r\n        size: string\r\n    }[];\r\n    labels: string[];\r\n    folder: string;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param mail\r\n     */\r\n    constructor(mail)\r\n    {\r\n        this.id = mail.id;\r\n        this.from = mail.from;\r\n        this.to = mail.to;\r\n        this.subject = mail.subject;\r\n        this.message = mail.message;\r\n        this.time = mail.time;\r\n        this.read = mail.read;\r\n        this.starred = mail.starred;\r\n        this.important = mail.important;\r\n        this.hasAttachments = mail.hasAttachments;\r\n        this.attachments = mail.attachments;\r\n        this.labels = mail.labels;\r\n        this.folder = mail.folder;\r\n    }\r\n\r\n    /**\r\n     * Toggle star\r\n     */\r\n    toggleStar(): void\r\n    {\r\n        this.starred = !this.starred;\r\n    }\r\n\r\n    /**\r\n     * Toggle important\r\n     */\r\n    toggleImportant(): void\r\n    {\r\n        this.important = !this.important;\r\n    }\r\n\r\n    /**\r\n     * Mark as read\r\n     */\r\n    markRead(): void\r\n    {\r\n        this.read = true;\r\n    }\r\n\r\n    /**\r\n     * Mark as unread\r\n     */\r\n    markUnread(): void\r\n    {\r\n        this.read = false;\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\r\n\r\n@Component({\r\n    selector       : 'mail-ngrx-list',\r\n    templateUrl    : './mail-list.component.html',\r\n    styleUrls      : ['./mail-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation  : ViewEncapsulation.None\r\n})\r\nexport class MailNgrxListComponent\r\n{\r\n    @Input()\r\n    mails: Mail[];\r\n\r\n    @Input()\r\n    currentMail: Mail[];\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {ActivatedRoute} _activatedRoute\r\n     * @param {MailNgrxService} _mailNgrxService\r\n     * @param {Router} _router\r\n     */\r\n    constructor(\r\n        private _activatedRoute: ActivatedRoute,\r\n        private _mailNgrxService: MailNgrxService,\r\n        private _router: Router\r\n    )\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Read mail\r\n     *\r\n     * @param mailId\r\n     */\r\n    readMail(mailId): void\r\n    {\r\n        const labelHandle  = this._activatedRoute.snapshot.params.labelHandle,\r\n              filterHandle = this._activatedRoute.snapshot.params.filterHandle,\r\n              folderHandle = this._activatedRoute.snapshot.params.folderHandle;\r\n\r\n        if ( labelHandle )\r\n        {\r\n            this._router.navigate(['apps/mail-ngrx/label/' + labelHandle + '/' + mailId]);\r\n        }\r\n        else if ( filterHandle )\r\n        {\r\n            this._router.navigate(['apps/mail-ngrx/filter/' + filterHandle + '/' + mailId]);\r\n        }\r\n        else\r\n        {\r\n            this._router.navigate(['apps/mail-ngrx/' + folderHandle + '/' + mailId]);\r\n        }\r\n    }\r\n}\r\n","<div *ngIf=\"mails.length === 0\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlexFill>\r\n    <span class=\"no-messages-text hint-text\">{{ 'MAIL.NO_MESSAGES' | translate }}</span>\r\n</div>\r\n\r\n<div class=\"mail-list\">\r\n    <mail-ngrx-list-item *ngFor=\"let mail of mails\" [mail]=\"mail\" (click)=\"readMail(mail.id)\"\r\n                    [ngClass]=\"{'current-mail':mail?.id == currentMail?.id}\">\r\n    </mail-ngrx-list-item>\r\n</div>\r\n","import * as MailsActions from 'app/main/apps/mail-ngrx/store/actions/mails.actions';\r\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\r\n\r\nexport interface MailsState\r\n{\r\n    entities?: { [id: number]: Mail };\r\n    currentMail: any;\r\n    selectedMailIds: string[];\r\n    searchText: string;\r\n    loading: boolean;\r\n    loaded: any;\r\n}\r\n\r\nexport const MailsInitialState: MailsState = {\r\n    entities       : {},\r\n    currentMail    : null,\r\n    selectedMailIds: [],\r\n    searchText     : '',\r\n    loading        : false,\r\n    loaded         : false\r\n};\r\n\r\nexport function MailsReducer(state = MailsInitialState, action: MailsActions.MailsActionsAll): MailsState\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case MailsActions.GET_MAILS:\r\n        {\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        }\r\n\r\n        case MailsActions.GET_MAILS_SUCCESS:\r\n        {\r\n\r\n            const mails = action.payload.mails;\r\n            const loaded = action.payload.loaded;\r\n            const entities = mails.reduce(\r\n                (_entities: { [id: number]: Mail }, mail: Mail) => {\r\n                    return {\r\n                        ..._entities,\r\n                        [mail.id]: mail\r\n                    };\r\n                }, {});\r\n\r\n            return {\r\n                ...state,\r\n                entities,\r\n                loading: false,\r\n                loaded\r\n            };\r\n        }\r\n\r\n        case MailsActions.GET_MAILS_FAILED:\r\n        {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                loaded : false\r\n            };\r\n        }\r\n\r\n        case MailsActions.SET_CURRENT_MAIL_SUCCESS:\r\n        {\r\n            return {\r\n                ...state,\r\n                currentMail: action.payload\r\n            };\r\n        }\r\n\r\n        case MailsActions.UPDATE_MAIL_SUCCESS:\r\n        {\r\n            return {\r\n                ...state,\r\n                entities: {\r\n                    ...state.entities,\r\n                    [action.payload.id]: action.payload\r\n                }\r\n            };\r\n        }\r\n\r\n        case MailsActions.SET_SEARCH_TEXT:\r\n        {\r\n\r\n            return {\r\n                ...state,\r\n                searchText: action.payload\r\n            };\r\n        }\r\n\r\n        case MailsActions.TOGGLE_IN_SELECTED_MAILS:\r\n        {\r\n\r\n            const mailId = action.payload;\r\n\r\n            let selectedMailIds = [...state.selectedMailIds];\r\n\r\n            if ( selectedMailIds.find(id => id === mailId) !== undefined )\r\n            {\r\n                selectedMailIds = selectedMailIds.filter(id => id !== mailId);\r\n            }\r\n            else\r\n            {\r\n                selectedMailIds = [...selectedMailIds, mailId];\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                selectedMailIds\r\n            };\r\n        }\r\n\r\n        case MailsActions.SELECT_ALL_MAILS:\r\n        {\r\n            const arr = Object.keys(state.entities).map(k => state.entities[k]);\r\n\r\n            const selectedMailIds = arr.map(mail => mail.id);\r\n\r\n            return {\r\n                ...state,\r\n                selectedMailIds\r\n            };\r\n        }\r\n\r\n        case MailsActions.DESELECT_ALL_MAILS:\r\n        {\r\n            return {\r\n                ...state,\r\n                selectedMailIds: []\r\n            };\r\n        }\r\n\r\n        case MailsActions.SELECT_MAILS_BY_PARAMETER:\r\n        {\r\n            const filter = action.payload;\r\n            const arr = Object.keys(state.entities).map(k => state.entities[k]);\r\n            const selectedMailIds = arr.filter(mail => mail[filter.parameter] === filter.value)\r\n                                       .map(mail => mail.id);\r\n            return {\r\n                ...state,\r\n                selectedMailIds\r\n            };\r\n        }\r\n\r\n        case MailsActions.SET_FOLDER_ON_SELECTED_MAILS:\r\n        {\r\n            const entities = {...state.entities};\r\n\r\n            state.selectedMailIds.map(id => {\r\n                entities[id] = {\r\n                    ...entities[id],\r\n                    folder: action.payload\r\n                };\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                entities\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { MailNgrxService } from '../../mail.service';\r\nimport { Mail } from '../../mail.model';\r\nimport * as fromStore from '../../store';\r\n\r\n@Component({\r\n    selector       : 'mail-ngrx-list-item',\r\n    templateUrl    : './mail-list-item.component.html',\r\n    styleUrls      : ['./mail-list-item.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation  : ViewEncapsulation.None\r\n})\r\nexport class MailNgrxListItemComponent implements OnInit\r\n{\r\n    @Input() mail: Mail;\r\n    @HostBinding('class.selected') selected: boolean;\r\n    @HostBinding('class.unread') unread: boolean;\r\n    labels$: Observable<any>;\r\n    selectedMailIds$: Observable<any>;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {ChangeDetectorRef} _changeDetectorRef\r\n     * @param {MailNgrxService} _mailNgrxService\r\n     * @param {Store} _store\r\n     */\r\n    constructor(\r\n        private _changeDetectorRef: ChangeDetectorRef,\r\n        private _mailNgrxService: MailNgrxService,\r\n        private _store: Store<fromStore.MailAppState>\r\n    )\r\n    {\r\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\r\n        this.selectedMailIds$ = this._store.pipe(select(fromStore.getSelectedMailIds));\r\n        this.selected = false;\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    ngOnInit(): void\r\n    {\r\n        // Set the initial values\r\n        this.mail = new Mail(this.mail);\r\n        this.unread = !this.mail.read;\r\n\r\n        this.selectedMailIds$.subscribe((selectedMailIds) => {\r\n            this.selected = selectedMailIds.length > 0 && selectedMailIds.find(id => id === this.mail.id) !== undefined;\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    refresh(): void\r\n    {\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    onSelectedChange(): void\r\n    {\r\n        this._store.dispatch(new fromStore.ToggleInSelectedMails(this.mail.id));\r\n    }\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n    <mat-checkbox [checked]=\"selected\" (change)=\"onSelectedChange()\"\r\n                  (click)=\"$event.stopPropagation();\">\r\n    </mat-checkbox>\r\n\r\n    <div class=\"info\" fxFlex FlexLayout=\"column\">\r\n\r\n        <div class=\"row-1\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n            <div class=\"name\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex>\r\n                <img class=\"avatar\" *ngIf=\"mail.from?.avatar\" alt=\"{{mail.from?.name}}\" src=\"{{mail.from?.avatar}}\"/>\r\n                <div class=\"avatar accent\" *ngIf=\"!mail.from?.avatar\">{{mail.from?.name[0]}}</div>\r\n                <span class=\"text-truncate\" *ngIf=\"mail?.from\">{{mail.from?.name}}</span>\r\n                <mat-icon class=\"s-16 ml-8\" *ngIf=\"mail.hasAttachments\">attachment</mat-icon>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                <div class=\"time\">{{mail.time}}</div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"row-2\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n            <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\r\n\r\n                <div class=\"subject text-truncate\">\r\n                    {{mail.subject}}\r\n                </div>\r\n\r\n                <div class=\"message text-truncate\" *ngIf=\"mail?.message\">\r\n                    {{mail.message | htmlToPlaintext | slice:0:180}}{{mail.message.length > 180 ? '...' : ''}}\r\n                </div>\r\n\r\n                <div class=\"labels\" fxLayout=\"row wrap\" fxHide fxShow.gt-sm>\r\n                    <div class=\"label\" *ngFor=\"let labelId of mail.labels\"\r\n                         fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                        <div class=\"label-color\"\r\n                             [ngStyle]=\"{'background-color': (labels$ | async) | getById:labelId:'color'}\"></div>\r\n                        <div class=\"label-title\">{{(labels$ | async) | getById:labelId:'title'}}</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Action } from '@ngrx/store';\r\n\r\nexport const GET_FOLDERS = '[FOLDERS] GET FOLDERS';\r\nexport const GET_FOLDERS_SUCCESS = '[FOLDERS] GET FOLDERS SUCCESS';\r\nexport const GET_FOLDERS_FAILED = '[FOLDERS] GET FOLDERS FAILED';\r\n\r\n/**\r\n * Get Folders\r\n */\r\nexport class GetFolders implements Action\r\n{\r\n    readonly type = GET_FOLDERS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Folders Success\r\n */\r\nexport class GetFoldersSuccess implements Action\r\n{\r\n    readonly type = GET_FOLDERS_SUCCESS;\r\n\r\n    constructor(public payload: any)\r\n    {\r\n    }\r\n}\r\n\r\n/**\r\n * Get Folders Failed\r\n */\r\nexport class GetFoldersFailed implements Action\r\n{\r\n    readonly type = GET_FOLDERS_FAILED;\r\n\r\n    constructor(public payload: string)\r\n    {\r\n    }\r\n}\r\n\r\nexport type FoldersActionsAll\r\n    = GetFolders\r\n    | GetFoldersSuccess\r\n    | GetFoldersFailed;\r\n","import { MailsEffect } from './mails.effects';\r\nimport { FoldersEffect } from './folders.effects';\r\nimport { FiltersEffect } from './filters.effects';\r\nimport { LabelsEffect } from './labels.effects';\r\n\r\nexport const effects = [\r\n    MailsEffect,\r\n    FoldersEffect,\r\n    FiltersEffect,\r\n    LabelsEffect\r\n];\r\n\r\nexport * from './mails.effects';\r\nexport * from './folders.effects';\r\nexport * from './filters.effects';\r\nexport * from './labels.effects';\r\n"]}